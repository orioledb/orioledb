CREATE SCHEMA nulls_schema;
SET SESSION search_path = 'nulls_schema';
CREATE EXTENSION orioledb;
SELECT orioledb_parallel_debug_start();
 orioledb_parallel_debug_start 
-------------------------------
 
(1 row)

-- Test null clauses in index scan
create table o_test_null_clauses (
	id bigint PRIMARY KEY,
	val int
) USING orioledb;
CREATE INDEX ON o_test_null_clauses(val);
INSERT INTO o_test_null_clauses
	SELECT id, id + 2 val FROM generate_series(1, 10) id;
INSERT INTO o_test_null_clauses VALUES (11, NULL), (12, NULL);
SET enable_bitmapscan = off;
SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT * FROM o_test_null_clauses ORDER BY val NULLS FIRST;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Sort Key: val NULLS FIRST
   ->  Index Only Scan using o_test_null_clauses_val_idx on o_test_null_clauses
(3 rows)

SELECT * FROM o_test_null_clauses ORDER BY val NULLS FIRST;
 id | val 
----+-----
 11 |    
 12 |    
  1 |   3
  2 |   4
  3 |   5
  4 |   6
  5 |   7
  6 |   8
  7 |   9
  8 |  10
  9 |  11
 10 |  12
(12 rows)

-- Test primary index scan with null clause
EXPLAIN (COSTS off) SELECT * FROM o_test_null_clauses
	WHERE val IS NULL ORDER BY val;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Index Only Scan using o_test_null_clauses_val_idx on o_test_null_clauses
   Index Cond: (val IS NULL)
(2 rows)

SELECT * FROM o_test_null_clauses WHERE val IS NULL ORDER BY val;
 id | val 
----+-----
 11 |    
 12 |    
(2 rows)

-- Test primary index scan with not null clause
EXPLAIN (COSTS off) SELECT * FROM o_test_null_clauses
	WHERE val IS NOT NULL ORDER BY val;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Index Only Scan using o_test_null_clauses_val_idx on o_test_null_clauses
   Index Cond: (val IS NOT NULL)
(2 rows)

SELECT * FROM o_test_null_clauses WHERE val IS NOT NULL ORDER BY val;
 id | val 
----+-----
  1 |   3
  2 |   4
  3 |   5
  4 |   6
  5 |   7
  6 |   8
  7 |   9
  8 |  10
  9 |  11
 10 |  12
(10 rows)

-- Test primary index scan with not null and another clause
EXPLAIN (COSTS off) SELECT * FROM o_test_null_clauses
	WHERE val IS NOT NULL AND val > 5 ORDER BY val;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Index Only Scan using o_test_null_clauses_val_idx on o_test_null_clauses
   Index Cond: ((val IS NOT NULL) AND (val > 5))
(2 rows)

SELECT * FROM o_test_null_clauses
	WHERE val IS NOT NULL AND val > 5 ORDER BY val;
 id | val 
----+-----
  4 |   6
  5 |   7
  6 |   8
  7 |   9
  8 |  10
  9 |  11
 10 |  12
(7 rows)

-- Test primary index scan with not null and another clause and nullsfirst
EXPLAIN (COSTS off) SELECT * FROM o_test_null_clauses
	WHERE val IS NOT NULL AND val > 5 ORDER BY val NULLS FIRST;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Sort Key: val NULLS FIRST
   ->  Index Only Scan using o_test_null_clauses_val_idx on o_test_null_clauses
         Index Cond: ((val IS NOT NULL) AND (val > 5))
(4 rows)

SELECT * FROM o_test_null_clauses
	WHERE val IS NOT NULL AND val > 5 ORDER BY val NULLS FIRST;
 id | val 
----+-----
  4 |   6
  5 |   7
  6 |   8
  7 |   9
  8 |  10
  9 |  11
 10 |  12
(7 rows)

RESET enable_seqscan;
RESET enable_bitmapscan;
-- Test primary index scan with null array clause
EXPLAIN (COSTS off) select id from o_test_null_clauses
	WHERE id = ANY(NULL::int4[]);
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Index Only Scan using o_test_null_clauses_pkey on o_test_null_clauses
   Index Cond: (id = ANY (NULL::integer[]))
(2 rows)

select id from o_test_null_clauses WHERE id = ANY(NULL::int4[]);
 id 
----
(0 rows)

-- Test nested primary index scan with not null clause
EXPLAIN (COSTS off) select max(id) from o_test_null_clauses;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Result
   InitPlan 1
     ->  Limit
           ->  Index Only Scan Backward using o_test_null_clauses_pkey on o_test_null_clauses
(4 rows)

select max(id) from o_test_null_clauses;
 max 
-----
  12
(1 row)

CREATE TABLE o_test_null_comparison (
	a int
) USING orioledb;
INSERT INTO o_test_null_comparison VALUES (1);
INSERT INTO o_test_null_comparison VALUES (NULL);
CREATE INDEX o_test_null_comparison_ix1 ON o_test_null_comparison (a);
BEGIN;
SET LOCAL enable_seqscan = off;
SET LOCAL enable_bitmapscan = off;
EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_null_comparison ORDER BY a;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Index Only Scan using o_test_null_comparison_ix1 on o_test_null_comparison
(1 row)

SELECT * FROM o_test_null_comparison ORDER BY a;
 a 
---
 1
  
(2 rows)

EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_null_comparison WHERE a > 1 ORDER BY a;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Index Only Scan using o_test_null_comparison_ix1 on o_test_null_comparison
   Index Cond: (a > 1)
(2 rows)

SELECT * FROM o_test_null_comparison WHERE a > 1 ORDER BY a;
 a 
---
(0 rows)

EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_null_comparison WHERE a < 1 ORDER BY a;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Index Only Scan using o_test_null_comparison_ix1 on o_test_null_comparison
   Index Cond: (a < 1)
(2 rows)

SELECT * FROM o_test_null_comparison WHERE a < 1 ORDER BY a;
 a 
---
(0 rows)

EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_null_comparison WHERE a IS NULL ORDER BY a;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Index Only Scan using o_test_null_comparison_ix1 on o_test_null_comparison
   Index Cond: (a IS NULL)
(2 rows)

SELECT * FROM o_test_null_comparison WHERE a IS NULL ORDER BY a;
 a 
---
  
(1 row)

EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_null_comparison WHERE a IS NOT NULL ORDER BY a;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Index Only Scan using o_test_null_comparison_ix1 on o_test_null_comparison
   Index Cond: (a IS NOT NULL)
(2 rows)

SELECT * FROM o_test_null_comparison WHERE a IS NOT NULL ORDER BY a;
 a 
---
 1
(1 row)

COMMIT;
CREATE TABLE o_test_null_row_comparison (
   a int,
   b int
) USING orioledb;
INSERT INTO o_test_null_row_comparison VALUES (1, 2);
INSERT INTO o_test_null_row_comparison VALUES (1, NULL);
CREATE INDEX ON o_test_null_row_comparison (a,b);
BEGIN;
SET LOCAL enable_seqscan = off;
SET LOCAL enable_bitmapscan = off;
SELECT a,b FROM o_test_null_row_comparison WHERE (a,b) > (1,1) ORDER BY a,b;
 a | b 
---+---
 1 | 2
(1 row)

COMMIT;
CREATE TABLE o_test_row_comparison_nulls_first (
   a int,
   b int
) USING orioledb;
INSERT INTO o_test_row_comparison_nulls_first VALUES (1, 2);
INSERT INTO o_test_row_comparison_nulls_first VALUES (1, NULL);
CREATE INDEX ON o_test_row_comparison_nulls_first (a, b NULLS FIRST);
BEGIN;
SET LOCAL enable_seqscan = off;
SET LOCAL enable_bitmapscan = off;
SELECT a,b FROM o_test_row_comparison_nulls_first
	WHERE (a,b) < (1,5) ORDER BY a,b;
 a | b 
---+---
 1 | 2
(1 row)

COMMIT;
CREATE TABLE o_test_nulls
(
  id bigint NOT NULL,
  value bigint,
  PRIMARY KEY (id)
) USING orioledb;
INSERT INTO o_test_nulls (SELECT i, i FROM generate_series(1,10000) i);
INSERT INTO o_test_nulls (SELECT i, NULL FROM generate_series(10001,11000) i);
CREATE INDEX o_test_nulls_value_idx ON o_test_nulls(value NULLS FIRST);
SELECT count(*) FROM o_test_nulls WHERE value IS NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM o_test_nulls WHERE value IS NOT NULL;
 count 
-------
 10000
(1 row)

DROP INDEX o_test_nulls_value_idx;
CREATE INDEX o_test_nulls_value_idx ON o_test_nulls(value NULLS LAST);
SELECT count(*) FROM o_test_nulls WHERE value IS NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM o_test_nulls WHERE value IS NOT NULL;
 count 
-------
 10000
(1 row)

DROP INDEX o_test_nulls_value_idx;
CREATE INDEX o_test_nulls_value_idx ON o_test_nulls(value ASC NULLS FIRST);
SELECT count(*) FROM o_test_nulls WHERE value IS NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM o_test_nulls WHERE value IS NOT NULL;
 count 
-------
 10000
(1 row)

DROP INDEX o_test_nulls_value_idx;
CREATE INDEX o_test_nulls_value_idx ON o_test_nulls(value ASC NULLS LAST);
SELECT count(*) FROM o_test_nulls WHERE value IS NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM o_test_nulls WHERE value IS NOT NULL;
 count 
-------
 10000
(1 row)

DROP INDEX o_test_nulls_value_idx;
CREATE INDEX o_test_nulls_value_idx ON o_test_nulls(value DESC NULLS FIRST);
SELECT count(*) FROM o_test_nulls WHERE value IS NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM o_test_nulls WHERE value IS NOT NULL;
 count 
-------
 10000
(1 row)

DROP INDEX o_test_nulls_value_idx;
CREATE INDEX o_test_nulls_value_idx ON o_test_nulls(value DESC NULLS LAST);
SELECT count(*) FROM o_test_nulls WHERE value IS NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM o_test_nulls WHERE value IS NOT NULL;
 count 
-------
 10000
(1 row)

DROP INDEX o_test_nulls_value_idx;
CREATE TABLE o_test_unique_nulls_not_distinct (
	val_1 int UNIQUE NULLS NOT DISTINCT,
	val_2 text
) USING orioledb;
TABLE o_test_unique_nulls_not_distinct;
 val_1 | val_2 
-------+-------
(0 rows)

INSERT INTO o_test_unique_nulls_not_distinct(val_2) VALUES ('six');
INSERT INTO o_test_unique_nulls_not_distinct(val_2) VALUES ('seven');
ERROR:  duplicate key value violates unique constraint "o_test_unique_nulls_not_distinct_val_1_key"
DETAIL:  Key (val_1)=(null) already exists.
TABLE o_test_unique_nulls_not_distinct;
 val_1 | val_2 
-------+-------
       | six
(1 row)

SELECT orioledb_parallel_debug_stop();
 orioledb_parallel_debug_stop 
------------------------------
 
(1 row)

DROP EXTENSION orioledb CASCADE;
NOTICE:  drop cascades to 6 other objects
DETAIL:  drop cascades to table o_test_null_clauses
drop cascades to table o_test_null_comparison
drop cascades to table o_test_null_row_comparison
drop cascades to table o_test_row_comparison_nulls_first
drop cascades to table o_test_nulls
drop cascades to table o_test_unique_nulls_not_distinct
DROP SCHEMA nulls_schema CASCADE;
RESET search_path;
