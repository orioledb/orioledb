Parsed test spec with 3 sessions

starting permutation: s1_begin s2_begin s3_begin s1_select_key_share s2_select_key_share s3_update s1_commit s2_commit s3_commit
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s3_begin: BEGIN;
step s1_select_key_share: SELECT * FROM rll_test WHERE key = 1 FOR KEY SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s2_select_key_share: SELECT * FROM rll_test WHERE key = 1 FOR KEY SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s3_update: UPDATE rll_test SET value = value + 1 WHERE key = 1;
step s1_commit: COMMIT;
step s2_commit: COMMIT;
step s3_commit: COMMIT;

starting permutation: s1_begin s2_begin s3_begin s1_select_key_share s2_select_key_share s3_update s3_commit s3_begin s3_key_update s1_commit s2_commit s3_commit
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s3_begin: BEGIN;
step s1_select_key_share: SELECT * FROM rll_test WHERE key = 1 FOR KEY SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s2_select_key_share: SELECT * FROM rll_test WHERE key = 1 FOR KEY SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s3_update: UPDATE rll_test SET value = value + 1 WHERE key = 1;
step s3_commit: COMMIT;
step s3_begin: BEGIN;
step s3_key_update: UPDATE rll_test SET key = key + 10 WHERE key = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_commit: COMMIT;
step s3_key_update: <... completed>
step s3_commit: COMMIT;

starting permutation: s1_begin s2_begin s3_begin s3_update s1_select_key_share s2_select_key_share s1_commit s2_commit s3_commit
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s3_begin: BEGIN;
step s3_update: UPDATE rll_test SET value = value + 1 WHERE key = 1;
step s1_select_key_share: SELECT * FROM rll_test WHERE key = 1 FOR KEY SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s2_select_key_share: SELECT * FROM rll_test WHERE key = 1 FOR KEY SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s1_commit: COMMIT;
step s2_commit: COMMIT;
step s3_commit: COMMIT;

starting permutation: s1_begin s2_begin s3_begin s1_select_share s2_select_share s3_update s1_commit s2_commit s3_commit
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s3_begin: BEGIN;
step s1_select_share: SELECT * FROM rll_test WHERE key = 1 FOR SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s2_select_share: SELECT * FROM rll_test WHERE key = 1 FOR SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s3_update: UPDATE rll_test SET value = value + 1 WHERE key = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_commit: COMMIT;
step s3_update: <... completed>
step s3_commit: COMMIT;

starting permutation: s1_begin s2_begin s3_begin s1_select_key_share s2_select_share s3_update s1_commit s2_commit s3_commit
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s3_begin: BEGIN;
step s1_select_key_share: SELECT * FROM rll_test WHERE key = 1 FOR KEY SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s2_select_share: SELECT * FROM rll_test WHERE key = 1 FOR SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s3_update: UPDATE rll_test SET value = value + 1 WHERE key = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_commit: COMMIT;
step s3_update: <... completed>
step s3_commit: COMMIT;

starting permutation: s1_begin s2_begin s3_begin s1_select_key_share s2_select_no_key_update s3_update s1_commit s2_commit s3_commit
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s3_begin: BEGIN;
step s1_select_key_share: SELECT * FROM rll_test WHERE key = 1 FOR KEY SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s2_select_no_key_update: SELECT * FROM rll_test WHERE key = 1 FOR NO KEY UPDATE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s3_update: UPDATE rll_test SET value = value + 1 WHERE key = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_commit: COMMIT;
step s3_update: <... completed>
step s3_commit: COMMIT;

starting permutation: s1_begin s2_begin s3_begin s1_select_key_share s2_select_key_share s3_key_update s1_commit s2_commit s3_commit
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s3_begin: BEGIN;
step s1_select_key_share: SELECT * FROM rll_test WHERE key = 1 FOR KEY SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s2_select_key_share: SELECT * FROM rll_test WHERE key = 1 FOR KEY SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s3_key_update: UPDATE rll_test SET key = key + 10 WHERE key = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_commit: COMMIT;
step s3_key_update: <... completed>
step s3_commit: COMMIT;

starting permutation: s1_begin s2_begin s1_select_key_share s2_select_update s1_commit s2_commit
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s1_select_key_share: SELECT * FROM rll_test WHERE key = 1 FOR KEY SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s2_select_update: SELECT * FROM rll_test WHERE key = 1 FOR UPDATE; <waiting ...>
step s1_commit: COMMIT;
step s2_select_update: <... completed>
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s2_commit: COMMIT;

starting permutation: s1_begin s2_begin s1_select_share s2_select_no_key_update s1_commit s2_commit
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s1_select_share: SELECT * FROM rll_test WHERE key = 1 FOR SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s2_select_no_key_update: SELECT * FROM rll_test WHERE key = 1 FOR NO KEY UPDATE; <waiting ...>
step s1_commit: COMMIT;
step s2_select_no_key_update: <... completed>
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s2_commit: COMMIT;

starting permutation: s1_begin s2_begin s1_select_share s2_select_update s1_commit s2_commit
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s1_select_share: SELECT * FROM rll_test WHERE key = 1 FOR SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s2_select_update: SELECT * FROM rll_test WHERE key = 1 FOR UPDATE; <waiting ...>
step s1_commit: COMMIT;
step s2_select_update: <... completed>
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s2_commit: COMMIT;

starting permutation: s1_begin s3_begin s1_select_share s3_update s1_commit s3_commit
step s1_begin: BEGIN;
step s3_begin: BEGIN;
step s1_select_share: SELECT * FROM rll_test WHERE key = 1 FOR SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s3_update: UPDATE rll_test SET value = value + 1 WHERE key = 1; <waiting ...>
step s1_commit: COMMIT;
step s3_update: <... completed>
step s3_commit: COMMIT;

starting permutation: s1_begin s3_begin s1_select_key_share s3_delete s1_commit s3_commit
step s1_begin: BEGIN;
step s3_begin: BEGIN;
step s1_select_key_share: SELECT * FROM rll_test WHERE key = 1 FOR KEY SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s3_delete: DELETE FROM rll_test WHERE key = 1; <waiting ...>
step s1_commit: COMMIT;
step s3_delete: <... completed>
step s3_commit: COMMIT;

starting permutation: s1_begin s3_begin s3_update s1_select_update s3_commit s1_commit
step s1_begin: BEGIN;
step s3_begin: BEGIN;
step s3_update: UPDATE rll_test SET value = value + 1 WHERE key = 1;
step s1_select_update: SELECT * FROM rll_test WHERE key = 1 FOR UPDATE; <waiting ...>
step s3_commit: COMMIT;
step s1_select_update: <... completed>
key|value|uniq
---+-----+----
  1|    2|   1
(1 row)

step s1_commit: COMMIT;

starting permutation: s1_begin s3_begin s3_key_update s1_select_update s3_commit s1_commit
step s1_begin: BEGIN;
step s3_begin: BEGIN;
step s3_key_update: UPDATE rll_test SET key = key + 10 WHERE key = 1;
step s1_select_update: SELECT * FROM rll_test WHERE key = 1 FOR UPDATE; <waiting ...>
step s3_commit: COMMIT;
step s1_select_update: <... completed>
ERROR:  tuple to be locked has its primary key changed due to concurrent update
step s1_commit: COMMIT;

starting permutation: s1_begin s3_begin s3_delete s1_select_update s3_commit s1_commit
step s1_begin: BEGIN;
step s3_begin: BEGIN;
step s3_delete: DELETE FROM rll_test WHERE key = 1;
step s1_select_update: SELECT * FROM rll_test WHERE key = 1 FOR UPDATE; <waiting ...>
step s3_commit: COMMIT;
step s1_select_update: <... completed>
key|value|uniq
---+-----+----
(0 rows)

step s1_commit: COMMIT;

starting permutation: s1_begin s2_begin s3_begin s1_select_key_share s3_update s2_select_share s3_commit s1_commit s2_commit
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s3_begin: BEGIN;
step s1_select_key_share: SELECT * FROM rll_test WHERE key = 1 FOR KEY SHARE;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s3_update: UPDATE rll_test SET value = value + 1 WHERE key = 1;
step s2_select_share: SELECT * FROM rll_test WHERE key = 1 FOR SHARE; <waiting ...>
step s3_commit: COMMIT;
step s2_select_share: <... completed>
key|value|uniq
---+-----+----
  1|    2|   1
(1 row)

step s1_commit: COMMIT;
step s2_commit: COMMIT;

starting permutation: s1_begin s2_begin s1_update s2_update s1_commit s2_commit s1_select
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s1_update: UPDATE rll_test SET value = value + 10 WHERE key = 1;
step s2_update: UPDATE rll_test SET value = value + 10 WHERE key = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_update: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM rll_test;
key|value|uniq
---+-----+----
  1|   21|   1
  2|    2|   2
  3|    3|   3
  4|    4|   4
  5|    5|   5
  6|    6|   6
  7|    7|   7
  8|    8|   8
  9|    9|   9
 10|   10|  10
(10 rows)


starting permutation: s1_begin s2_begin s1_update s2_update s1_rollback s2_commit s1_select
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s1_update: UPDATE rll_test SET value = value + 10 WHERE key = 1;
step s2_update: UPDATE rll_test SET value = value + 10 WHERE key = 1; <waiting ...>
step s1_rollback: ROLLBACK;
step s2_update: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM rll_test;
key|value|uniq
---+-----+----
  1|   11|   1
  2|    2|   2
  3|    3|   3
  4|    4|   4
  5|    5|   5
  6|    6|   6
  7|    7|   7
  8|    8|   8
  9|    9|   9
 10|   10|  10
(10 rows)


starting permutation: s1_begin s2_begin s1_update s2_update_key s1_commit s2_commit s1_select
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s1_update: UPDATE rll_test SET value = value + 10 WHERE key = 1;
step s2_update_key: UPDATE rll_test SET key = value WHERE key = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_update_key: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM rll_test;
key|value|uniq
---+-----+----
  2|    2|   2
  3|    3|   3
  4|    4|   4
  5|    5|   5
  6|    6|   6
  7|    7|   7
  8|    8|   8
  9|    9|   9
 10|   10|  10
 11|   11|   1
(10 rows)


starting permutation: s1_begin s2_begin s1_update s2_update_key s1_rollback s2_commit s1_select
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s1_update: UPDATE rll_test SET value = value + 10 WHERE key = 1;
step s2_update_key: UPDATE rll_test SET key = value WHERE key = 1; <waiting ...>
step s1_rollback: ROLLBACK;
step s2_update_key: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM rll_test;
key|value|uniq
---+-----+----
  1|    1|   1
  2|    2|   2
  3|    3|   3
  4|    4|   4
  5|    5|   5
  6|    6|   6
  7|    7|   7
  8|    8|   8
  9|    9|   9
 10|   10|  10
(10 rows)


starting permutation: s1_trigger s1_begin s2_begin s1_update s2_update s1_commit s2_commit s1_select
step s1_trigger: CREATE TRIGGER before_update_trg BEFORE UPDATE ON rll_test FOR EACH ROW EXECUTE PROCEDURE update_trg_func();
step s1_begin: BEGIN;
step s2_begin: BEGIN;
s1: NOTICE:  old: (1, 1, 1), new: (1, 11, 1)
step s1_update: UPDATE rll_test SET value = value + 10 WHERE key = 1;
step s2_update: UPDATE rll_test SET value = value + 10 WHERE key = 1; <waiting ...>
step s1_commit: COMMIT;
s2: NOTICE:  old: (1, 11, 1), new: (1, 21, 1)
step s2_update: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM rll_test;
key|value|uniq
---+-----+----
  1|   21|   1
  2|    2|   2
  3|    3|   3
  4|    4|   4
  5|    5|   5
  6|    6|   6
  7|    7|   7
  8|    8|   8
  9|    9|   9
 10|   10|  10
(10 rows)


starting permutation: s1_trigger s1_begin s2_begin s1_update s2_update s1_rollback s2_commit s1_select
step s1_trigger: CREATE TRIGGER before_update_trg BEFORE UPDATE ON rll_test FOR EACH ROW EXECUTE PROCEDURE update_trg_func();
step s1_begin: BEGIN;
step s2_begin: BEGIN;
s1: NOTICE:  old: (1, 1, 1), new: (1, 11, 1)
step s1_update: UPDATE rll_test SET value = value + 10 WHERE key = 1;
step s2_update: UPDATE rll_test SET value = value + 10 WHERE key = 1; <waiting ...>
step s1_rollback: ROLLBACK;
s2: NOTICE:  old: (1, 1, 1), new: (1, 11, 1)
step s2_update: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM rll_test;
key|value|uniq
---+-----+----
  1|   11|   1
  2|    2|   2
  3|    3|   3
  4|    4|   4
  5|    5|   5
  6|    6|   6
  7|    7|   7
  8|    8|   8
  9|    9|   9
 10|   10|  10
(10 rows)


starting permutation: s1_trigger s1_begin s2_begin s1_update s2_update_key s1_commit s2_commit s1_select
step s1_trigger: CREATE TRIGGER before_update_trg BEFORE UPDATE ON rll_test FOR EACH ROW EXECUTE PROCEDURE update_trg_func();
step s1_begin: BEGIN;
step s2_begin: BEGIN;
s1: NOTICE:  old: (1, 1, 1), new: (1, 11, 1)
step s1_update: UPDATE rll_test SET value = value + 10 WHERE key = 1;
step s2_update_key: UPDATE rll_test SET key = value WHERE key = 1; <waiting ...>
step s1_commit: COMMIT;
s2: NOTICE:  old: (1, 11, 1), new: (11, 11, 1)
step s2_update_key: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM rll_test;
key|value|uniq
---+-----+----
  2|    2|   2
  3|    3|   3
  4|    4|   4
  5|    5|   5
  6|    6|   6
  7|    7|   7
  8|    8|   8
  9|    9|   9
 10|   10|  10
 11|   11|   1
(10 rows)


starting permutation: s1_trigger s1_begin s2_begin s1_update s2_update_key s1_rollback s2_commit s1_select
step s1_trigger: CREATE TRIGGER before_update_trg BEFORE UPDATE ON rll_test FOR EACH ROW EXECUTE PROCEDURE update_trg_func();
step s1_begin: BEGIN;
step s2_begin: BEGIN;
s1: NOTICE:  old: (1, 1, 1), new: (1, 11, 1)
step s1_update: UPDATE rll_test SET value = value + 10 WHERE key = 1;
step s2_update_key: UPDATE rll_test SET key = value WHERE key = 1; <waiting ...>
step s1_rollback: ROLLBACK;
s2: NOTICE:  old: (1, 1, 1), new: (1, 1, 1)
step s2_update_key: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM rll_test;
key|value|uniq
---+-----+----
  1|    1|   1
  2|    2|   2
  3|    3|   3
  4|    4|   4
  5|    5|   5
  6|    6|   6
  7|    7|   7
  8|    8|   8
  9|    9|   9
 10|   10|  10
(10 rows)


starting permutation: s1_begin s2_begin s1_update_2 s2_update_2 s1_commit s2_commit s1_select_2
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s1_update_2: UPDATE rll_test_text_pkey_update SET val_2 = val_2 - 200 WHERE val_1 = 'a';
step s2_update_2: UPDATE rll_test_text_pkey_update SET val_2 = val_2 + 450 WHERE val_1 = 'a'; <waiting ...>
step s1_commit: COMMIT;
step s2_update_2: <... completed>
step s2_commit: COMMIT;
step s1_select_2: SELECT * FROM rll_test_text_pkey_update;
val_1|val_2
-----+-----
a    |  850
b    |  600
(2 rows)


starting permutation: s1_begin s2_begin s1_select_update_skip_locked s1_select_update_skip_locked s2_select_update_skip_locked s1_commit s2_commit
step s1_begin: BEGIN;
step s2_begin: BEGIN;
step s1_select_update_skip_locked: SELECT * FROM rll_test ORDER BY key FOR UPDATE SKIP LOCKED LIMIT 1;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s1_select_update_skip_locked: SELECT * FROM rll_test ORDER BY key FOR UPDATE SKIP LOCKED LIMIT 1;
key|value|uniq
---+-----+----
  1|    1|   1
(1 row)

step s2_select_update_skip_locked: SELECT * FROM rll_test ORDER BY key FOR UPDATE SKIP LOCKED LIMIT 1;
key|value|uniq
---+-----+----
  2|    2|   2
(1 row)

step s1_commit: COMMIT;
step s2_commit: COMMIT;
