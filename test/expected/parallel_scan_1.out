CREATE SCHEMA parallel_scan;
SET SESSION search_path = 'parallel_scan';
CREATE EXTENSION orioledb;
SET min_parallel_table_scan_size = 1;
SET min_parallel_index_scan_size = 1;
SET parallel_setup_cost = 0;
SET parallel_tuple_cost = 0;
SET enable_seqscan = ON;
SET enable_bitmapscan = OFF;
SET enable_indexscan = OFF;
CREATE TABLE seq_scan_test
(
	id serial primary key,
	i int4
) USING orioledb;
CREATE FUNCTION pseudo_random(seed bigint, i bigint) RETURNS float8 AS
$$
	SELECT substr(sha256(($1::text || ' ' || $2::text)::bytea)::text,2,16)::bit(52)::bigint::float8 / pow(2.0, 52.0);
$$ LANGUAGE sql;
ALTER SEQUENCE seq_scan_test_id_seq RESTART WITH 100000;
INSERT INTO seq_scan_test (i)
	SELECT pseudo_random(1, v) * 1200000 FROM generate_series(1,300000) v;
ANALYZE seq_scan_test;
CREATE INDEX seq_scan_test_ix1 ON seq_scan_test (i);
SET max_parallel_workers_per_gather = 0;
EXPLAIN (COSTS OFF) SELECT count(*) FROM seq_scan_test WHERE i < 100;
           QUERY PLAN            
---------------------------------
 Aggregate
   ->  Seq Scan on seq_scan_test
         Filter: (i < 100)
(3 rows)

SELECT count(*) FROM seq_scan_test WHERE i < 100;
 count 
-------
    19
(1 row)

SET max_parallel_workers_per_gather = 5;
EXPLAIN (COSTS OFF) SELECT count(*) FROM seq_scan_test WHERE i < 100;
                      QUERY PLAN                      
------------------------------------------------------
 Finalize Aggregate
   ->  Gather
         Workers Planned: 5
         ->  Partial Aggregate
               ->  Parallel Seq Scan on seq_scan_test
                     Filter: (i < 100)
(6 rows)

SELECT count(*) FROM seq_scan_test WHERE i < 100;
 count 
-------
    19
(1 row)

SET max_parallel_workers_per_gather = 0;
EXPLAIN (COSTS OFF)
	SELECT * FROM seq_scan_test WHERE i < 100 ORDER BY i,id LIMIT 20;
              QUERY PLAN               
---------------------------------------
 Limit
   ->  Sort
         Sort Key: i, id
         ->  Seq Scan on seq_scan_test
               Filter: (i < 100)
(5 rows)

SELECT * FROM seq_scan_test WHERE i < 100 ORDER BY i,id LIMIT 20;
   id   | i  
--------+----
 132074 |  0
 215987 |  1
 206349 |  6
 328283 |  9
 357225 | 10
 259376 | 23
 289405 | 23
 131420 | 25
 228520 | 25
 281441 | 29
 286045 | 46
 341383 | 47
 242343 | 56
 351116 | 63
 118127 | 64
 208922 | 67
 386459 | 74
 203029 | 90
 316940 | 90
(19 rows)

SET max_parallel_workers_per_gather = 5;
EXPLAIN (COSTS OFF)
	SELECT * FROM seq_scan_test WHERE i < 100 ORDER BY i,id LIMIT 20;
                      QUERY PLAN                      
------------------------------------------------------
 Limit
   ->  Gather Merge
         Workers Planned: 5
         ->  Sort
               Sort Key: i, id
               ->  Parallel Seq Scan on seq_scan_test
                     Filter: (i < 100)
(7 rows)

SELECT * FROM seq_scan_test WHERE i < 100 ORDER BY i,id LIMIT 20;
   id   | i  
--------+----
 132074 |  0
 215987 |  1
 206349 |  6
 328283 |  9
 357225 | 10
 259376 | 23
 289405 | 23
 131420 | 25
 228520 | 25
 281441 | 29
 286045 | 46
 341383 | 47
 242343 | 56
 351116 | 63
 118127 | 64
 208922 | 67
 386459 | 74
 203029 | 90
 316940 | 90
(19 rows)

SET max_parallel_workers_per_gather = 0;
EXPLAIN (COSTS OFF) SELECT count(*) FROM seq_scan_test WHERE i < 1000;
           QUERY PLAN            
---------------------------------
 Aggregate
   ->  Seq Scan on seq_scan_test
         Filter: (i < 1000)
(3 rows)

SELECT count(*) FROM seq_scan_test WHERE i < 1000;
 count 
-------
   246
(1 row)

SET max_parallel_workers_per_gather = 5;
EXPLAIN (COSTS OFF) SELECT count(*) FROM seq_scan_test WHERE i < 1000;
                      QUERY PLAN                      
------------------------------------------------------
 Finalize Aggregate
   ->  Gather
         Workers Planned: 5
         ->  Partial Aggregate
               ->  Parallel Seq Scan on seq_scan_test
                     Filter: (i < 1000)
(6 rows)

SELECT count(*) FROM seq_scan_test WHERE i < 1000;
 count 
-------
   246
(1 row)

SET max_parallel_workers_per_gather = 0;
EXPLAIN (COSTS OFF)
	SELECT * FROM seq_scan_test WHERE i < 1000 ORDER BY i,id LIMIT 20;
              QUERY PLAN               
---------------------------------------
 Limit
   ->  Sort
         Sort Key: i, id
         ->  Seq Scan on seq_scan_test
               Filter: (i < 1000)
(5 rows)

SELECT * FROM seq_scan_test WHERE i < 1000 ORDER BY i,id LIMIT 20;
   id   |  i  
--------+-----
 132074 |   0
 215987 |   1
 206349 |   6
 328283 |   9
 357225 |  10
 259376 |  23
 289405 |  23
 131420 |  25
 228520 |  25
 281441 |  29
 286045 |  46
 341383 |  47
 242343 |  56
 351116 |  63
 118127 |  64
 208922 |  67
 386459 |  74
 203029 |  90
 316940 |  90
 339989 | 104
(20 rows)

SET max_parallel_workers_per_gather = 5;
EXPLAIN (COSTS OFF)
	SELECT * FROM seq_scan_test WHERE i < 1000 ORDER BY i,id LIMIT 20;
                      QUERY PLAN                      
------------------------------------------------------
 Limit
   ->  Gather Merge
         Workers Planned: 5
         ->  Sort
               Sort Key: i, id
               ->  Parallel Seq Scan on seq_scan_test
                     Filter: (i < 1000)
(7 rows)

SELECT * FROM seq_scan_test WHERE i < 1000 ORDER BY i,id LIMIT 20;
   id   |  i  
--------+-----
 132074 |   0
 215987 |   1
 206349 |   6
 328283 |   9
 357225 |  10
 259376 |  23
 289405 |  23
 131420 |  25
 228520 |  25
 281441 |  29
 286045 |  46
 341383 |  47
 242343 |  56
 351116 |  63
 118127 |  64
 208922 |  67
 386459 |  74
 203029 |  90
 316940 |  90
 339989 | 104
(20 rows)

SET max_parallel_workers_per_gather = 0;
EXPLAIN (COSTS OFF)
	SELECT count(*) FROM seq_scan_test WHERE i < 1000 OR i > 13000;
                 QUERY PLAN                  
---------------------------------------------
 Aggregate
   ->  Seq Scan on seq_scan_test
         Filter: ((i < 1000) OR (i > 13000))
(3 rows)

SELECT count(*) FROM seq_scan_test WHERE i < 1000 OR i > 13000;
 count  
--------
 296960
(1 row)

SET max_parallel_workers_per_gather = 5;
EXPLAIN (COSTS OFF)
	SELECT count(*) FROM seq_scan_test WHERE i < 1000 OR i > 13000;
                       QUERY PLAN                        
---------------------------------------------------------
 Finalize Aggregate
   ->  Gather
         Workers Planned: 5
         ->  Partial Aggregate
               ->  Parallel Seq Scan on seq_scan_test
                     Filter: ((i < 1000) OR (i > 13000))
(6 rows)

SELECT count(*) FROM seq_scan_test WHERE i < 1000 OR i > 13000;
 count  
--------
 296960
(1 row)

SET max_parallel_workers_per_gather = 0;
EXPLAIN (COSTS OFF)
	SELECT * FROM seq_scan_test WHERE i < 1000 OR i > 13000 ORDER BY i,id LIMIT 20;
                    QUERY PLAN                     
---------------------------------------------------
 Limit
   ->  Sort
         Sort Key: i, id
         ->  Seq Scan on seq_scan_test
               Filter: ((i < 1000) OR (i > 13000))
(5 rows)

SELECT * FROM seq_scan_test WHERE i < 1000 OR i > 13000 ORDER BY i,id LIMIT 20;
   id   |  i  
--------+-----
 132074 |   0
 215987 |   1
 206349 |   6
 328283 |   9
 357225 |  10
 259376 |  23
 289405 |  23
 131420 |  25
 228520 |  25
 281441 |  29
 286045 |  46
 341383 |  47
 242343 |  56
 351116 |  63
 118127 |  64
 208922 |  67
 386459 |  74
 203029 |  90
 316940 |  90
 339989 | 104
(20 rows)

SET max_parallel_workers_per_gather = 5;
EXPLAIN (COSTS OFF)
	SELECT * FROM seq_scan_test WHERE i < 1000 OR i > 13000 ORDER BY i,id LIMIT 20;
                       QUERY PLAN                        
---------------------------------------------------------
 Limit
   ->  Gather Merge
         Workers Planned: 5
         ->  Sort
               Sort Key: i, id
               ->  Parallel Seq Scan on seq_scan_test
                     Filter: ((i < 1000) OR (i > 13000))
(7 rows)

SELECT * FROM seq_scan_test WHERE i < 1000 OR i > 13000 ORDER BY i,id LIMIT 20;
   id   |  i  
--------+-----
 132074 |   0
 215987 |   1
 206349 |   6
 328283 |   9
 357225 |  10
 259376 |  23
 289405 |  23
 131420 |  25
 228520 |  25
 281441 |  29
 286045 |  46
 341383 |  47
 242343 |  56
 351116 |  63
 118127 |  64
 208922 |  67
 386459 |  74
 203029 |  90
 316940 |  90
 339989 | 104
(20 rows)

RESET max_parallel_workers_per_gather;
RESET min_parallel_table_scan_size;
RESET min_parallel_index_scan_size;
RESET parallel_setup_cost;
RESET parallel_tuple_cost;
RESET enable_seqscan;
RESET enable_bitmapscan;
RESET enable_indexscan;
CREATE TABLE o_test_o_scan_register (
	val_1 TEXT PRIMARY KEY,
	val_2 DECIMAL NOT NULL
) USING orioledb;
INSERT INTO o_test_o_scan_register (val_1, val_2) VALUES ('A', 0), ('B', 0);
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT orioledb_parallel_debug_start();
 orioledb_parallel_debug_start 
-------------------------------
 
(1 row)

EXPLAIN (COSTS OFF) SELECT val_1, val_2 FROM o_test_o_scan_register
    WHERE val_1 IN ('A', 'B') ORDER BY val_1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Index Scan using o_test_o_scan_register_pkey on o_test_o_scan_register
   Index Cond: (val_1 = ANY ('{A,B}'::text[]))
(2 rows)

SELECT val_1, val_2 FROM o_test_o_scan_register
    WHERE val_1 IN ('A', 'B') ORDER BY val_1;
 val_1 | val_2 
-------+-------
 A     |     0
 B     |     0
(2 rows)

SELECT orioledb_parallel_debug_stop();
 orioledb_parallel_debug_stop 
------------------------------
 
(1 row)

COMMIT;
CREATE FUNCTION func_1(int, int) RETURNS int LANGUAGE SQL
AS
'select pg_advisory_xact_lock_shared($1); select 1;'
PARALLEL SAFE;
CREATE TABLE o_test_1 USING orioledb
AS SELECT val_1 FROM generate_series(1, 1000) val_1;
SET parallel_setup_cost = 0;
SET min_parallel_table_scan_size = 0;
SET parallel_leader_participation = off;
SELECT sum(func_1(1,val_1)) FROM o_test_1;
 sum  
------
 1000
(1 row)

RESET parallel_setup_cost;
RESET min_parallel_table_scan_size;
RESET parallel_leader_participation;
BEGIN;
CREATE TABLE o_test_parallel_bitmap_scan (
	val_1 int
) USING orioledb;
CREATE INDEX ind_1 ON o_test_parallel_bitmap_scan (val_1);
INSERT INTO o_test_parallel_bitmap_scan SELECT generate_series(1, 10);
SELECT orioledb_parallel_debug_start();
 orioledb_parallel_debug_start 
-------------------------------
 
(1 row)

EXPLAIN (COSTS OFF)
	SELECT count(*) FROM o_test_parallel_bitmap_scan WHERE val_1 < 5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   ->  Custom Scan (o_scan) on o_test_parallel_bitmap_scan
         Bitmap heap scan
         Recheck Cond: (val_1 < 5)
         ->  Bitmap Index Scan on ind_1
               Index Cond: (val_1 < 5)
(6 rows)

SELECT count(*) FROM o_test_parallel_bitmap_scan WHERE val_1 < 5;
 count 
-------
     4
(1 row)

SELECT orioledb_parallel_debug_stop();
 orioledb_parallel_debug_stop 
------------------------------
 
(1 row)

COMMIT;
BEGIN;
SELECT orioledb_parallel_debug_start();
 orioledb_parallel_debug_start 
-------------------------------
 
(1 row)

SET LOCAL enable_seqscan = OFF;
CREATE TABLE o_test_parallel_index_scan (
	val_1 text,
	PRIMARY KEY(val_1)
) USING orioledb;
SELECT * FROM o_test_parallel_index_scan;
 val_1 
-------
(0 rows)

SELECT orioledb_parallel_debug_stop();
 orioledb_parallel_debug_stop 
------------------------------
 
(1 row)

COMMIT;
-- Wrapper function, which converts result of SQL query to the text
CREATE OR REPLACE FUNCTION query_to_text(sql TEXT, out result text)
	RETURNS SETOF TEXT AS $$
	BEGIN
		FOR result IN EXECUTE sql LOOP
			RETURN NEXT;
		END LOOP;
	END $$
LANGUAGE plpgsql;
BEGIN;
SELECT orioledb_parallel_debug_start();
 orioledb_parallel_debug_start 
-------------------------------
 
(1 row)

CREATE TABLE o_test_parallel_bitmap_scan_explain_buffers (
	val_1 integer NOT NULL PRIMARY KEY
)USING orioledb;
SELECT regexp_replace(t, '[\d\.]+', 'x', 'g')
FROM query_to_text($$
	EXPLAIN (ANALYZE, BUFFERS)
		SELECT * FROM o_test_parallel_bitmap_scan_explain_buffers
			ORDER BY val_1;
$$) as t;
                                                                                regexp_replace                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using o_test_parallel_bitmap_scan_explain_buffers_pkey on o_test_parallel_bitmap_scan_explain_buffers  (cost=x rows=x width=x) (actual time=x rows=x loops=x)
   Heap Fetches: x
 Planning:
   Buffers: shared hit=x
 Planning Time: x ms
 Execution Time: x ms
(6 rows)

SELECT orioledb_parallel_debug_stop();
 orioledb_parallel_debug_stop 
------------------------------
 
(1 row)

COMMIT;
CREATE TABLE o_test_parallel_unique_index_scan (
	val_1 int,
	val_2 int,
	UNIQUE (val_1)
) USING orioledb;
INSERT INTO o_test_parallel_unique_index_scan
	SELECT v, v FROM generate_series(0, 2) v;
BEGIN;
SELECT orioledb_parallel_debug_start();
 orioledb_parallel_debug_start 
-------------------------------
 
(1 row)

EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_parallel_unique_index_scan ORDER BY val_1;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Index Scan using o_test_parallel_unique_index_scan_val_1_key on o_test_parallel_unique_index_scan
(1 row)

SELECT * FROM o_test_parallel_unique_index_scan ORDER BY val_1;
 val_1 | val_2 
-------+-------
     0 |     0
     1 |     1
     2 |     2
(3 rows)

SELECT orioledb_parallel_debug_stop();
 orioledb_parallel_debug_stop 
------------------------------
 
(1 row)

COMMIT;
BEGIN;
SELECT orioledb_parallel_debug_start();
 orioledb_parallel_debug_start 
-------------------------------
 
(1 row)

CREATE TABLE o_test_parallel (
	val_1 int
) USING orioledb;
INSERT INTO o_test_parallel (val_1) VALUES (1);
SELECT * FROM o_test_parallel;
 val_1 
-------
     1
(1 row)

SELECT orioledb_parallel_debug_stop();
 orioledb_parallel_debug_stop 
------------------------------
 
(1 row)

COMMIT;
BEGIN;
SET LOCAL parallel_setup_cost = 0;
SET LOCAL min_parallel_table_scan_size = 1;
SET LOCAL min_parallel_index_scan_size = 1;
SET LOCAL max_parallel_workers_per_gather = 1;
SET LOCAL enable_indexscan = off;
SET LOCAL enable_hashjoin = off;
SET LOCAL enable_sort = off;
SET LOCAL enable_bitmapscan = off;
CREATE TABLE o_test_parallel_seq_rescan1 (
	val_1 int,
	val_2 int
) USING orioledb;
CREATE TABLE o_test_parallel_seq_rescan2 (
	val_1 int,
	val_2 int
) USING orioledb;
INSERT INTO o_test_parallel_seq_rescan1 VALUES (1, 10001);
INSERT INTO o_test_parallel_seq_rescan2 VALUES (1, 20001);
ANALYZE o_test_parallel_seq_rescan1;
EXPLAIN (COSTS OFF)
	SELECT ot1.val_1, ot1.val_2 ot1v, ot2.val_2 ot2v
		FROM o_test_parallel_seq_rescan1 ot1
		INNER JOIN o_test_parallel_seq_rescan2 ot2
			ON ot1.val_1 = ot2.val_1
				WHERE ot1.val_1 = 1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Nested Loop
   ->  Seq Scan on o_test_parallel_seq_rescan1 ot1
         Filter: (val_1 = 1)
   ->  Gather
         Workers Planned: 1
         ->  Parallel Seq Scan on o_test_parallel_seq_rescan2 ot2
               Filter: (val_1 = 1)
(7 rows)

SELECT ot1.val_1, ot1.val_2 ot1v, ot2.val_2 ot2v
	FROM o_test_parallel_seq_rescan1 ot1
	INNER JOIN o_test_parallel_seq_rescan2 ot2
	ON ot1.val_1 = ot2.val_1
		WHERE ot1.val_1 = 1;
 val_1 | ot1v  | ot2v  
-------+-------+-------
     1 | 10001 | 20001
(1 row)

COMMIT;
BEGIN;
SET LOCAL parallel_setup_cost = 0;
SET LOCAL min_parallel_table_scan_size = 1;
SET LOCAL min_parallel_index_scan_size = 1;
SET LOCAL max_parallel_workers_per_gather = 1;
SET LOCAL enable_indexscan = off;
SET LOCAL enable_hashjoin = off;
SET LOCAL enable_sort = off;
SET LOCAL enable_bitmapscan = off;
CREATE TABLE o_test_parallel_seq_rescan_multiple_joins1 (
	val_1 int,
	val_2 int
) USING orioledb;
CREATE TABLE o_test_parallel_seq_rescan_multiple_joins2 (
	val_1 int,
	val_2 int
) USING orioledb;
CREATE TABLE o_test_parallel_seq_rescan_multiple_joins3 (
	val_1 int,
	val_2 int
) USING orioledb;
INSERT INTO o_test_parallel_seq_rescan_multiple_joins1
	SELECT v, v + 10000 FROM generate_series(1, 1000) v;
INSERT INTO o_test_parallel_seq_rescan_multiple_joins2
	SELECT v, v + 20000 FROM generate_series(1, 1000) v;
INSERT INTO o_test_parallel_seq_rescan_multiple_joins3
	VALUES (1, 30001), (1, 30002), (1, 30003);
ANALYZE o_test_parallel_seq_rescan_multiple_joins1,
		o_test_parallel_seq_rescan_multiple_joins2;
EXPLAIN (COSTS OFF)
	SELECT ot1.val_1, ot1.val_2 ot1v, ot2.val_2 ot2v, ot3.val_2 ot3v
		FROM o_test_parallel_seq_rescan_multiple_joins1 ot1
		INNER JOIN o_test_parallel_seq_rescan_multiple_joins2 ot2
			ON ot1.val_1 = ot2.val_1
		INNER JOIN o_test_parallel_seq_rescan_multiple_joins3 ot3
			ON ot1.val_1 = ot3.val_1
				WHERE ot1.val_1 = 1 ORDER BY ot1.val_1, ot1v, ot2v, ot3v;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort
   Sort Key: ot1.val_2, ot2.val_2, ot3.val_2
   ->  Nested Loop
         ->  Nested Loop
               ->  Gather
                     Workers Planned: 1
                     ->  Parallel Seq Scan on o_test_parallel_seq_rescan_multiple_joins1 ot1
                           Filter: (val_1 = 1)
               ->  Gather
                     Workers Planned: 1
                     ->  Parallel Seq Scan on o_test_parallel_seq_rescan_multiple_joins2 ot2
                           Filter: (val_1 = 1)
         ->  Gather
               Workers Planned: 1
               ->  Parallel Seq Scan on o_test_parallel_seq_rescan_multiple_joins3 ot3
                     Filter: (val_1 = 1)
(16 rows)

SELECT ot1.val_1, ot1.val_2 ot1v, ot2.val_2 ot2v, ot3.val_2 ot3v
	FROM o_test_parallel_seq_rescan_multiple_joins1 ot1
	INNER JOIN o_test_parallel_seq_rescan_multiple_joins2 ot2
		ON ot1.val_1 = ot2.val_1
	INNER JOIN o_test_parallel_seq_rescan_multiple_joins3 ot3
		ON ot1.val_1 = ot3.val_1
			WHERE ot1.val_1 = 1 ORDER BY ot1.val_1, ot1v, ot2v, ot3v;
 val_1 | ot1v  | ot2v  | ot3v  
-------+-------+-------+-------
     1 | 10001 | 20001 | 30001
     1 | 10001 | 20001 | 30002
     1 | 10001 | 20001 | 30003
(3 rows)

COMMIT;
BEGIN;
CREATE TABLE o_test_parallelscan_reinitialize1 (
	val_1 int,
	val_2 int,
	PRIMARY KEY(val_1, val_2)
) USING orioledb;
CREATE TABLE o_test_parallelscan_reinitialize2 (
	val_1 int,
	val_2 int,
	PRIMARY KEY(val_1,val_2)
) USING orioledb;
CREATE INDEX o_test_parallelscan_reinitialize1_ix
	ON o_test_parallelscan_reinitialize1 (val_1);
CREATE INDEX o_test_parallelscan_reinitialize2_ix
	ON o_test_parallelscan_reinitialize2 (val_1);
INSERT INTO o_test_parallelscan_reinitialize1
	SELECT 1, v FROM generate_series(1, 5) v;
INSERT INTO o_test_parallelscan_reinitialize2 VALUES (1,1), (1,2);
ANALYZE o_test_parallelscan_reinitialize1;
SET LOCAL parallel_leader_participation = off;
SET LOCAL parallel_setup_cost = 0;
SET LOCAL parallel_tuple_cost = 0;
SET LOCAL min_parallel_table_scan_size = 0;
SET LOCAL max_parallel_workers_per_gather = 3;
SET LOCAL enable_indexscan = OFF;
SET LOCAL enable_hashjoin = OFF;
SET LOCAL enable_sort = OFF;
SET LOCAL enable_bitmapscan = OFF;
EXPLAIN (COSTS OFF)
	SELECT ot1.val_1, ot1.val_2 ot1v2, ot2.val_2 ot2v2
		FROM o_test_parallelscan_reinitialize1 ot1
		INNER JOIN o_test_parallelscan_reinitialize2 ot2
			ON ot1.val_1 = ot2.val_1
				WHERE ot1.val_1 % 1000 = 1 AND ot2.val_1 = any(array[1]);
                               QUERY PLAN                               
------------------------------------------------------------------------
 Nested Loop
   Join Filter: (ot1.val_1 = ot2.val_1)
   ->  Seq Scan on o_test_parallelscan_reinitialize1 ot1
         Filter: ((val_1 % 1000) = 1)
   ->  Gather
         Workers Planned: 3
         ->  Parallel Seq Scan on o_test_parallelscan_reinitialize2 ot2
               Filter: (val_1 = ANY ('{1}'::integer[]))
(8 rows)

SELECT ot1.val_1, ot1.val_2 ot1v2, ot2.val_2 ot2v2
	FROM o_test_parallelscan_reinitialize1 ot1
	INNER JOIN o_test_parallelscan_reinitialize2 ot2
		ON ot1.val_1 = ot2.val_1
			WHERE ot1.val_1 % 1000 = 1 AND ot2.val_1 = any(array[1]);
 val_1 | ot1v2 | ot2v2 
-------+-------+-------
     1 |     1 |     1
     1 |     1 |     2
     1 |     2 |     1
     1 |     2 |     2
     1 |     3 |     1
     1 |     3 |     2
     1 |     4 |     1
     1 |     4 |     2
     1 |     5 |     1
     1 |     5 |     2
(10 rows)

COMMIT;
BEGIN;
CREATE TABLE o_test_parallel_join (
	val_1 float8 NOT NULL,
	val_2 text NOT NULL,
	PRIMARY KEY(val_1, val_2)
) USING orioledb;
INSERT INTO o_test_parallel_join
	SELECT a, repeat('x', a) FROM generate_series(1, 3) as a;
CREATE TABLE o_test_parallel_join2 (
	val_1 float8 NOT NULL,
	val_2 text NOT NULL,
	PRIMARY KEY (val_1, val_2)
) USING orioledb;
INSERT INTO o_test_parallel_join2
	SELECT a, repeat('x', a) FROM generate_series(1, 3) as a;
SET LOCAL max_parallel_workers_per_gather = 2;
SET LOCAL parallel_setup_cost = 0;
SET LOCAL parallel_tuple_cost = 0;
SET LOCAL min_parallel_table_scan_size = 1;
SET LOCAL enable_indexscan = OFF;
SET LOCAL enable_hashjoin = OFF;
SET LOCAL enable_mergejoin = OFF;
SET LOCAL enable_bitmapscan = OFF;
EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_parallel_join
		JOIN o_test_parallel_join2 USING (val_1, val_2);
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Join Filter: ((o_test_parallel_join.val_1 = o_test_parallel_join2.val_1) AND (o_test_parallel_join.val_2 = o_test_parallel_join2.val_2))
   ->  Gather
         Workers Planned: 2
         ->  Parallel Seq Scan on o_test_parallel_join
   ->  Materialize
         ->  Gather
               Workers Planned: 2
               ->  Parallel Seq Scan on o_test_parallel_join2
(9 rows)

SELECT * FROM o_test_parallel_join
	JOIN o_test_parallel_join2 USING (val_1, val_2);
 val_1 | val_2 
-------+-------
     1 | x
     2 | xx
     3 | xxx
(3 rows)

COMMIT;
BEGIN;
CREATE TABLE o_test_no_parallel_index_scan (
  val_1 INT PRIMARY KEY,
  val_2 text
) USING orioledb;
INSERT INTO o_test_no_parallel_index_scan VALUES (1, 'a'), (2, 'b');
SET LOCAL max_parallel_workers_per_gather = 1;
SET LOCAL parallel_setup_cost = 0;
SET LOCAL parallel_tuple_cost = 0;
SET LOCAL min_parallel_table_scan_size = 1;
SET LOCAL min_parallel_index_scan_size = 1;
SET LOCAL enable_seqscan = off;
SET LOCAL enable_bitmapscan = off;
-- Parallel Index Only Scan is not implemented yet, so it doesn't used here
EXPLAIN (COSTS OFF) SELECT val_1 FROM o_test_no_parallel_index_scan;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Index Only Scan using o_test_no_parallel_index_scan_pkey on o_test_no_parallel_index_scan
(1 row)

SELECT val_1 FROM o_test_no_parallel_index_scan;
 val_1 
-------
     1
     2
(2 rows)

SET LOCAL enable_indexonlyscan = off;
-- Parallel Index Scan is not implemented yet, so it doesn't used here
EXPLAIN (COSTS OFF)
	SELECT array_agg(val_1), array_agg(val_2)
		FROM o_test_no_parallel_index_scan WHERE val_1 > 0;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using o_test_no_parallel_index_scan_pkey on o_test_no_parallel_index_scan
         Index Cond: (val_1 > 0)
(3 rows)

SELECT array_agg(val_1), array_agg(val_2)
	FROM o_test_no_parallel_index_scan WHERE val_1 > 0;
 array_agg | array_agg 
-----------+-----------
 {1,2}     | {a,b}
(1 row)

COMMIT;
BEGIN;
SET LOCAL parallel_setup_cost = 0;
SET LOCAL min_parallel_table_scan_size = 1;
CREATE TABLE o_test_no_parallel_bitmap_scan (
    val_1 int4
) USING orioledb;
INSERT INTO o_test_no_parallel_bitmap_scan SELECT val_1 FROM generate_series(1,100) val_1;
CREATE INDEX o_test_no_parallel_bitmap_scan_ix1 ON o_test_no_parallel_bitmap_scan (val_1);
SET LOCAL enable_seqscan = off;
EXPLAIN (COSTS OFF)
    SELECT count(*) FROM o_test_no_parallel_bitmap_scan WHERE val_1 >= 10 AND val_1 < 50;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Only Scan using o_test_no_parallel_bitmap_scan_ix1 on o_test_no_parallel_bitmap_scan
         Index Cond: ((val_1 >= 10) AND (val_1 < 50))
(3 rows)

SELECT count(*) FROM o_test_no_parallel_bitmap_scan WHERE val_1 >= 10 AND val_1 < 50;
 count 
-------
    40
(1 row)

-- Parallel Bitmap Heap Scan is not implemented yet, so it doesn't used here
EXPLAIN (COSTS OFF)
    SELECT count(*) FROM o_test_no_parallel_bitmap_scan WHERE val_1 <@ int4range(10,50);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Only Scan using o_test_no_parallel_bitmap_scan_ix1 on o_test_no_parallel_bitmap_scan
         Index Cond: ((val_1 >= 10) AND (val_1 < 50))
(3 rows)

SELECT count(*) FROM o_test_no_parallel_bitmap_scan WHERE val_1 <@ int4range(10,50);
 count 
-------
    40
(1 row)

-- Parallel Bitmap Heap Scan is not implemented yet, so it doesn't used here
EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_no_parallel_bitmap_scan WHERE val_1 <@ int4range(10,50);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Index Only Scan using o_test_no_parallel_bitmap_scan_ix1 on o_test_no_parallel_bitmap_scan
   Index Cond: ((val_1 >= 10) AND (val_1 < 50))
(2 rows)

SELECT * FROM o_test_no_parallel_bitmap_scan WHERE val_1 <@ int4range(10,50);
 val_1 
-------
    10
    11
    12
    13
    14
    15
    16
    17
    18
    19
    20
    21
    22
    23
    24
    25
    26
    27
    28
    29
    30
    31
    32
    33
    34
    35
    36
    37
    38
    39
    40
    41
    42
    43
    44
    45
    46
    47
    48
    49
(40 rows)

COMMIT;
DROP EXTENSION orioledb CASCADE;
NOTICE:  drop cascades to 19 other objects
DETAIL:  drop cascades to table seq_scan_test
drop cascades to table o_test_o_scan_register
drop cascades to table o_test_1
drop cascades to table o_test_parallel_bitmap_scan
drop cascades to table o_test_parallel_index_scan
drop cascades to table o_test_parallel_bitmap_scan_explain_buffers
drop cascades to table o_test_parallel_unique_index_scan
drop cascades to table o_test_parallel
drop cascades to table o_test_parallel_seq_rescan1
drop cascades to table o_test_parallel_seq_rescan2
drop cascades to table o_test_parallel_seq_rescan_multiple_joins1
drop cascades to table o_test_parallel_seq_rescan_multiple_joins2
drop cascades to table o_test_parallel_seq_rescan_multiple_joins3
drop cascades to table o_test_parallelscan_reinitialize1
drop cascades to table o_test_parallelscan_reinitialize2
drop cascades to table o_test_parallel_join
drop cascades to table o_test_parallel_join2
drop cascades to table o_test_no_parallel_index_scan
drop cascades to table o_test_no_parallel_bitmap_scan
DROP SCHEMA parallel_scan CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to function pseudo_random(bigint,bigint)
drop cascades to function func_1(integer,integer)
drop cascades to function query_to_text(text)
RESET search_path;
