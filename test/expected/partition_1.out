CREATE SCHEMA partition;
SET SESSION search_path = 'partition';
CREATE EXTENSION orioledb;
CREATE TABLE o_test_partition_on_conflict_range (
  val_1 int,
  val_2 int
) PARTITION BY RANGE(val_1);
CREATE TABLE o_test_partition_on_conflict_range_child (
  val_2 int,
  val_1 int NOT NULL
) USING orioledb;
CREATE UNIQUE INDEX ON o_test_partition_on_conflict_range (val_1);
ALTER TABLE o_test_partition_on_conflict_range
	ATTACH PARTITION o_test_partition_on_conflict_range_child
		FOR VALUES FROM (0) TO (20);
EXPLAIN (COSTS OFF)
	INSERT INTO o_test_partition_on_conflict_range
		VALUES (1, 2) ON CONFLICT (val_1)
			DO UPDATE SET val_1 = excluded.val_1 * 10;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Insert on o_test_partition_on_conflict_range
   Conflict Resolution: UPDATE
   Conflict Arbiter Indexes: o_test_partition_on_conflict_range_val_1_idx
   ->  Result
(4 rows)

INSERT INTO o_test_partition_on_conflict_range VALUES (0, 1);
INSERT INTO o_test_partition_on_conflict_range
	VALUES (1, 2) ON CONFLICT (val_1)
		DO UPDATE SET val_1 = excluded.val_1 * 10;
EXPLAIN (COSTS OFF) SELECT * FROM o_test_partition_on_conflict_range;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Seq Scan on o_test_partition_on_conflict_range_child o_test_partition_on_conflict_range
(1 row)

SELECT * FROM o_test_partition_on_conflict_range;
 val_1 | val_2 
-------+-------
     0 |     1
     1 |     2
(2 rows)

SELECT * FROM o_test_partition_on_conflict_range_child;
 val_2 | val_1 
-------+-------
     1 |     0
     2 |     1
(2 rows)

INSERT INTO o_test_partition_on_conflict_range
	VALUES (1, 2) ON CONFLICT (val_1)
		DO UPDATE SET val_1 = excluded.val_1 * 100;
ERROR:  invalid ON UPDATE specification
DETAIL:  The result tuple would appear in a different partition than the original tuple.
INSERT INTO o_test_partition_on_conflict_range
	VALUES (1, 2) ON CONFLICT (val_1)
		DO UPDATE SET val_1 = excluded.val_1 * 10;
SELECT * FROM o_test_partition_on_conflict_range;
 val_1 | val_2 
-------+-------
     0 |     1
    10 |     2
(2 rows)

SELECT * FROM o_test_partition_on_conflict_range_child;
 val_2 | val_1 
-------+-------
     1 |     0
     2 |    10
(2 rows)

DELETE FROM o_test_partition_on_conflict_range WHERE val_1 = 10;
SELECT * FROM o_test_partition_on_conflict_range;
 val_1 | val_2 
-------+-------
     0 |     1
(1 row)

SELECT * FROM o_test_partition_on_conflict_range_child;
 val_2 | val_1 
-------+-------
     1 |     0
(1 row)

CREATE TABLE o_test_partition_on_conflict_list (
	a int UNIQUE,
	b char(2)
) PARTITION BY LIST (a);
CREATE TABLE o_test_partition_on_conflict_list_child (
	a int UNIQUE,
	b char(2)
) USING orioledb;
ALTER TABLE o_test_partition_on_conflict_list
	ATTACH PARTITION o_test_partition_on_conflict_list_child
		FOR VALUES IN (3);
INSERT INTO o_test_partition_on_conflict_list VALUES (3, 'a') ON CONFLICT (a)
	DO UPDATE SET b = excluded.b;
SELECT * FROM o_test_partition_on_conflict_list;
 a | b  
---+----
 3 | a 
(1 row)

INSERT INTO o_test_partition_on_conflict_list VALUES (3, 'a') ON CONFLICT (a)
	DO UPDATE SET b = excluded.b || 'c';
SELECT * FROM o_test_partition_on_conflict_list;
 a | b  
---+----
 3 | ac
(1 row)

DELETE FROM o_test_partition_on_conflict_list WHERE a = 3;
SELECT * FROM o_test_partition_on_conflict_list;
 a | b 
---+---
(0 rows)

CREATE TABLE o_test_partition_on_conflict_update_same_trx (
	a int UNIQUE,
	b char(2)
) PARTITION BY LIST (a);
CREATE TABLE o_test_partition_on_conflict_update_same_trx_child (
	a int UNIQUE,
	b char(2)
) USING orioledb;
ALTER TABLE o_test_partition_on_conflict_update_same_trx
	ATTACH PARTITION o_test_partition_on_conflict_update_same_trx_child
		FOR VALUES IN (3);
BEGIN;
INSERT INTO o_test_partition_on_conflict_update_same_trx
	VALUES (3, 'a') ON CONFLICT (a) DO UPDATE SET b = excluded.b;
TABLE o_test_partition_on_conflict_update_same_trx;
 a | b  
---+----
 3 | a 
(1 row)

INSERT INTO o_test_partition_on_conflict_update_same_trx
	VALUES (3, 'a') ON CONFLICT (a) DO UPDATE SET b = excluded.b || 'c';
TABLE o_test_partition_on_conflict_update_same_trx;
 a | b  
---+----
 3 | ac
(1 row)

COMMIT;
CREATE TABLE o_test_cross_partition_update (
  val_1 int,
  val_2 int
) PARTITION BY RANGE(val_1);
CREATE TABLE o_test_cross_partition_update_child (
  val_2 int,
  val_1 int NOT NULL
) USING orioledb;
CREATE TABLE o_test_cross_partition_update_child2 (
  val_2 int,
  val_1 int NOT NULL
) USING orioledb;
CREATE UNIQUE INDEX ON o_test_cross_partition_update (val_1);
ALTER TABLE o_test_cross_partition_update
	ATTACH PARTITION o_test_cross_partition_update_child
		FOR VALUES FROM (0) TO (10);
ALTER TABLE o_test_cross_partition_update
	ATTACH PARTITION o_test_cross_partition_update_child2
		FOR VALUES FROM (10) TO (20);
INSERT INTO o_test_cross_partition_update
	SELECT v, v * 10 FROM generate_series(0, 19) v;
EXPLAIN (COSTS OFF) SELECT * FROM o_test_cross_partition_update;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Append
   ->  Seq Scan on o_test_cross_partition_update_child o_test_cross_partition_update_1
   ->  Seq Scan on o_test_cross_partition_update_child2 o_test_cross_partition_update_2
(3 rows)

EXPLAIN (COSTS OFF) SELECT * FROM o_test_cross_partition_update_child;
                   QUERY PLAN                    
-------------------------------------------------
 Seq Scan on o_test_cross_partition_update_child
(1 row)

EXPLAIN (COSTS OFF) SELECT * FROM o_test_cross_partition_update_child2;
                    QUERY PLAN                    
--------------------------------------------------
 Seq Scan on o_test_cross_partition_update_child2
(1 row)

EXPLAIN (COSTS OFF) SELECT * FROM o_test_cross_partition_update
	WHERE val_1 BETWEEN 0 AND 5;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Custom Scan (o_scan) on o_test_cross_partition_update_child o_test_cross_partition_update
   Bitmap heap scan
   Recheck Cond: ((val_1 >= 0) AND (val_1 <= 5))
   ->  Bitmap Index Scan on o_test_cross_partition_update_child_val_1_idx
         Index Cond: ((val_1 >= 0) AND (val_1 <= 5))
(5 rows)

EXPLAIN (COSTS OFF) SELECT * FROM o_test_cross_partition_update
	WHERE val_1 BETWEEN 10 AND 15;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Custom Scan (o_scan) on o_test_cross_partition_update_child2 o_test_cross_partition_update
   Bitmap heap scan
   Recheck Cond: ((val_1 >= 10) AND (val_1 <= 15))
   ->  Bitmap Index Scan on o_test_cross_partition_update_child2_val_1_idx
         Index Cond: ((val_1 >= 10) AND (val_1 <= 15))
(5 rows)

SELECT * FROM o_test_cross_partition_update;
 val_1 | val_2 
-------+-------
     0 |     0
     1 |    10
     2 |    20
     3 |    30
     4 |    40
     5 |    50
     6 |    60
     7 |    70
     8 |    80
     9 |    90
    10 |   100
    11 |   110
    12 |   120
    13 |   130
    14 |   140
    15 |   150
    16 |   160
    17 |   170
    18 |   180
    19 |   190
(20 rows)

SELECT * FROM o_test_cross_partition_update_child;
 val_2 | val_1 
-------+-------
     0 |     0
    10 |     1
    20 |     2
    30 |     3
    40 |     4
    50 |     5
    60 |     6
    70 |     7
    80 |     8
    90 |     9
(10 rows)

SELECT * FROM o_test_cross_partition_update_child2;
 val_2 | val_1 
-------+-------
   100 |    10
   110 |    11
   120 |    12
   130 |    13
   140 |    14
   150 |    15
   160 |    16
   170 |    17
   180 |    18
   190 |    19
(10 rows)

SELECT * FROM o_test_cross_partition_update WHERE val_1 BETWEEN 0 AND 5;
 val_1 | val_2 
-------+-------
     0 |     0
     1 |    10
     2 |    20
     3 |    30
     4 |    40
     5 |    50
(6 rows)

SELECT * FROM o_test_cross_partition_update WHERE val_1 BETWEEN 10 AND 15;
 val_1 | val_2 
-------+-------
    10 |   100
    11 |   110
    12 |   120
    13 |   130
    14 |   140
    15 |   150
(6 rows)

DELETE FROM o_test_cross_partition_update WHERE val_1 BETWEEN 10 AND 15;
SELECT * FROM o_test_cross_partition_update;
 val_1 | val_2 
-------+-------
     0 |     0
     1 |    10
     2 |    20
     3 |    30
     4 |    40
     5 |    50
     6 |    60
     7 |    70
     8 |    80
     9 |    90
    16 |   160
    17 |   170
    18 |   180
    19 |   190
(14 rows)

SELECT * FROM o_test_cross_partition_update_child;
 val_2 | val_1 
-------+-------
     0 |     0
    10 |     1
    20 |     2
    30 |     3
    40 |     4
    50 |     5
    60 |     6
    70 |     7
    80 |     8
    90 |     9
(10 rows)

SELECT * FROM o_test_cross_partition_update_child2;
 val_2 | val_1 
-------+-------
   160 |    16
   170 |    17
   180 |    18
   190 |    19
(4 rows)

UPDATE o_test_cross_partition_update
	SET val_1 = val_1 + 10 WHERE val_1 BETWEEN 0 AND 5;
SELECT * FROM o_test_cross_partition_update;
 val_1 | val_2 
-------+-------
     6 |    60
     7 |    70
     8 |    80
     9 |    90
    16 |   160
    17 |   170
    18 |   180
    19 |   190
    10 |     0
    11 |    10
    12 |    20
    13 |    30
    14 |    40
    15 |    50
(14 rows)

SELECT * FROM o_test_cross_partition_update_child;
 val_2 | val_1 
-------+-------
    60 |     6
    70 |     7
    80 |     8
    90 |     9
(4 rows)

SELECT * FROM o_test_cross_partition_update_child2;
 val_2 | val_1 
-------+-------
   160 |    16
   170 |    17
   180 |    18
   190 |    19
     0 |    10
    10 |    11
    20 |    12
    30 |    13
    40 |    14
    50 |    15
(10 rows)

CREATE TABLE o_test_1 (
	val_1 int,
	val_2 int,
	PRIMARY KEY (val_1, val_2)
) USING orioledb;
CREATE TABLE o_test_2 (
	val_1 int,
	val_2 int
) PARTITION BY RANGE (val_1, val_2);
CREATE TABLE o_test_3 (
	val_1 int,
	val_2 int
) USING orioledb;
ALTER TABLE o_test_2
	ATTACH PARTITION o_test_3 FOR
		VALUES FROM (0, 0) TO (10, 10);
ALTER TABLE o_test_2
	ADD FOREIGN KEY (val_1, val_2)
		REFERENCES o_test_1;
INSERT INTO o_test_1
	VALUES (5, 6);
INSERT INTO o_test_2
	VALUES (5, 6);
UPDATE o_test_1 SET val_2 = 7;
ERROR:  update or delete on table "o_test_1" violates foreign key constraint "o_test_2_val_1_val_2_fkey" on table "o_test_2"
DETAIL:  Key (val_1, val_2)=(5, 6) is still referenced from table "o_test_2".
CREATE TABLE o_test_partition_index (
	val_1 int,
	val_2 int
) PARTITION BY RANGE (val_1);
CREATE TABLE o_test_partition_index_child1 (
	val_1 int NOT NULL,
	val_2 int
) USING orioledb;
CREATE TABLE o_test_partition_index_child2 (
	val_1 int NOT NULL,
	val_2 int
) USING orioledb;
CREATE UNIQUE INDEX o_test_partition_index_child1_ix1
	ON o_test_partition_index_child1 (val_1);
ALTER TABLE o_test_partition_index ADD PRIMARY KEY (val_1);
ALTER TABLE o_test_partition_index
	ATTACH PARTITION o_test_partition_index_child1 FOR VALUES FROM (1) TO (6);
ALTER TABLE o_test_partition_index
	ATTACH PARTITION o_test_partition_index_child2 FOR VALUES FROM (6) TO (11);
INSERT INTO o_test_partition_index SELECT v, v FROM generate_series(1, 10) v;
EXPLAIN (COSTS OFF) SELECT * FROM o_test_partition_index ORDER BY val_1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Append
   ->  Custom Scan (o_scan) on o_test_partition_index_child1 o_test_partition_index_1
         Forward index scan of: o_test_partition_index_child1_pkey
   ->  Custom Scan (o_scan) on o_test_partition_index_child2 o_test_partition_index_2
         Forward index scan of: o_test_partition_index_child2_pkey
(5 rows)

SELECT * FROM o_test_partition_index ORDER BY val_1;
 val_1 | val_2 
-------+-------
     1 |     1
     2 |     2
     3 |     3
     4 |     4
     5 |     5
     6 |     6
     7 |     7
     8 |     8
     9 |     9
    10 |    10
(10 rows)

EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_partition_index
		WHERE val_1 BETWEEN 2 AND 3 ORDER BY val_1;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort
   Sort Key: o_test_partition_index.val_1
   ->  Custom Scan (o_scan) on o_test_partition_index_child1 o_test_partition_index
         Bitmap heap scan
         Recheck Cond: ((val_1 >= 2) AND (val_1 <= 3))
         ->  Bitmap Index Scan on o_test_partition_index_child1_ix1
               Index Cond: ((val_1 >= 2) AND (val_1 <= 3))
(7 rows)

SELECT * FROM o_test_partition_index
	WHERE val_1 BETWEEN 2 AND 3 ORDER BY val_1;
 val_1 | val_2 
-------+-------
     2 |     2
     3 |     3
(2 rows)

EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_partition_index
		WHERE val_1 BETWEEN 7 AND 9 ORDER BY val_1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Custom Scan (o_scan) on o_test_partition_index_child2 o_test_partition_index
   Forward index scan of: o_test_partition_index_child2_pkey
   Conds: ((val_1 >= 7) AND (val_1 <= 9))
(3 rows)

SELECT * FROM o_test_partition_index WHERE val_1 BETWEEN 7 AND 9 ORDER BY val_1;
 val_1 | val_2 
-------+-------
     7 |     7
     8 |     8
     9 |     9
(3 rows)

EXPLAIN (COSTS OFF) SELECT * FROM o_test_partition_index_child1 ORDER BY val_1;
                         QUERY PLAN                          
-------------------------------------------------------------
 Custom Scan (o_scan) on o_test_partition_index_child1
   Forward index scan of: o_test_partition_index_child1_pkey
(2 rows)

SELECT * FROM o_test_partition_index_child1 ORDER BY val_1;
 val_1 | val_2 
-------+-------
     1 |     1
     2 |     2
     3 |     3
     4 |     4
     5 |     5
(5 rows)

EXPLAIN (COSTS OFF) SELECT * FROM o_test_partition_index_child2 ORDER BY val_1;
                         QUERY PLAN                          
-------------------------------------------------------------
 Custom Scan (o_scan) on o_test_partition_index_child2
   Forward index scan of: o_test_partition_index_child2_pkey
(2 rows)

SELECT * FROM o_test_partition_index_child2 ORDER BY val_1;
 val_1 | val_2 
-------+-------
     6 |     6
     7 |     7
     8 |     8
     9 |     9
    10 |    10
(5 rows)

BEGIN;
CREATE TABLE o_test_partition_pkey_update (
	val_1 int PRIMARY KEY
) PARTITION BY RANGE (val_1);
CREATE TABLE o_test_partition_pkey_update_child (
	LIKE o_test_partition_pkey_update
) USING orioledb;
ALTER TABLE o_test_partition_pkey_update
	ATTACH PARTITION o_test_partition_pkey_update_child
		FOR VALUES FROM (1) TO (5);
SELECT * FROM o_test_partition_pkey_update;
 val_1 
-------
(0 rows)

SELECT * FROM o_test_partition_pkey_update_child;
 val_1 
-------
(0 rows)

EXPLAIN (COSTS OFF)
	UPDATE o_test_partition_pkey_update SET val_1 = 3 WHERE val_1 = 1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Update on o_test_partition_pkey_update
   Update on o_test_partition_pkey_update_child o_test_partition_pkey_update_1
   ->  Result
         ->  Custom Scan (o_scan) on o_test_partition_pkey_update_child o_test_partition_pkey_update_1
               Forward index scan of: o_test_partition_pkey_update_child_pkey
               Conds: (val_1 = 1)
(6 rows)

UPDATE o_test_partition_pkey_update SET val_1 = 3 WHERE val_1 = 1;
SELECT * FROM o_test_partition_pkey_update;
 val_1 
-------
(0 rows)

SELECT * FROM o_test_partition_pkey_update_child;
 val_1 
-------
(0 rows)

COMMIT;
CREATE TABLE o_test_partition_multiple_moves (
  val_1 int,
  val_2 int,
  val_3 int
) PARTITION BY LIST (val_1);
CREATE TABLE o_test_partition_multiple_moves_child1 (
  val_1 int,
  val_2 int,
  val_3 int
) USING orioledb;
ALTER TABLE o_test_partition_multiple_moves
	ATTACH PARTITION o_test_partition_multiple_moves_child1 FOR VALUES IN (1);
CREATE TABLE o_test_partition_multiple_moves_child2 (
  val_1 int,
  val_2 int,
  val_3 int
) USING orioledb;
ALTER TABLE o_test_partition_multiple_moves
	ATTACH PARTITION o_test_partition_multiple_moves_child2 FOR VALUES IN (2);
INSERT INTO o_test_partition_multiple_moves VALUES (1, 1, 60);
CREATE TABLE o_test_partition_multiple_moves_from (
  val int
) USING orioledb;
INSERT INTO o_test_partition_multiple_moves_from VALUES (1), (1);
SELECT tableoid::regclass, * FROM o_test_partition_multiple_moves;
                tableoid                | val_1 | val_2 | val_3 
----------------------------------------+-------+-------+-------
 o_test_partition_multiple_moves_child1 |     1 |     1 |    60
(1 row)

UPDATE o_test_partition_multiple_moves t1 SET val_1 = 2
	FROM o_test_partition_multiple_moves_from t4
	WHERE t1.val_1 = t4.val AND val_1 = 1;
SELECT tableoid::regclass, * FROM o_test_partition_multiple_moves;
                tableoid                | val_1 | val_2 | val_3 
----------------------------------------+-------+-------+-------
 o_test_partition_multiple_moves_child2 |     2 |     1 |    60
(1 row)

-- Should succeed in PG17 but fail in PG16
CREATE TABLE o_test_partition_pkey_update_move (
  val_1 INT PRIMARY KEY
) PARTITION BY LIST (val_1) USING orioledb;
-- Create it using default AM for PG16
CREATE TABLE IF NOT EXISTS o_test_partition_pkey_update_move (
  val_1 INT PRIMARY KEY
) PARTITION BY LIST (val_1);
NOTICE:  relation "o_test_partition_pkey_update_move" already exists, skipping
CREATE TABLE o_test_partition_pkey_update_move_child1
	PARTITION OF o_test_partition_pkey_update_move FOR VALUES IN (1);
CREATE TABLE o_test_partition_pkey_update_move_child2 (
  val_1 int NOT NULL
) USING orioledb;
CREATE TABLE o_test_partition_pkey_update_move_child3
	PARTITION OF o_test_partition_pkey_update_move FOR VALUES IN (3, 4);
BEGIN;
ALTER TABLE o_test_partition_pkey_update_move
	ATTACH PARTITION o_test_partition_pkey_update_move_child2
		FOR VALUES IN (2);
INSERT INTO o_test_partition_pkey_update_move VALUES (1), (3);
SELECT tableoid::regclass, * FROM o_test_partition_pkey_update_move;
                 tableoid                 | val_1 
------------------------------------------+-------
 o_test_partition_pkey_update_move_child1 |     1
 o_test_partition_pkey_update_move_child3 |     3
(2 rows)

UPDATE o_test_partition_pkey_update_move SET val_1 = val_1 + 1;
SELECT tableoid::regclass, * FROM o_test_partition_pkey_update_move;
                 tableoid                 | val_1 
------------------------------------------+-------
 o_test_partition_pkey_update_move_child2 |     2
 o_test_partition_pkey_update_move_child3 |     4
(2 rows)

COMMIT;
CREATE TABLE o_test_cross_partition_update_trigger (
  a INT PRIMARY KEY
) PARTITION BY LIST (a);
CREATE TABLE o_test_cross_partition_update_trigger_fk (
	a INT,
	CONSTRAINT fkey FOREIGN KEY (a)
		REFERENCES o_test_cross_partition_update_trigger(a) ON UPDATE CASCADE
) USING orioledb;
CREATE TABLE o_test_cross_partition_update_trigger_child1 (
  a int NOT NULL
) USING orioledb;
CREATE TABLE o_test_cross_partition_update_trigger_child2 (
  a int NOT NULL
) USING orioledb;
ALTER TABLE o_test_cross_partition_update_trigger
	ATTACH PARTITION o_test_cross_partition_update_trigger_child1
		FOR VALUES IN (1);
ALTER TABLE o_test_cross_partition_update_trigger
	ATTACH PARTITION o_test_cross_partition_update_trigger_child2
		FOR VALUES IN (2);
INSERT INTO o_test_cross_partition_update_trigger VALUES (1);
INSERT INTO o_test_cross_partition_update_trigger_fk VALUES (1);
SELECT tableoid::regclass, * FROM o_test_cross_partition_update_trigger;
                   tableoid                   | a 
----------------------------------------------+---
 o_test_cross_partition_update_trigger_child1 | 1
(1 row)

TABLE o_test_cross_partition_update_trigger_fk;
 a 
---
 1
(1 row)

UPDATE o_test_cross_partition_update_trigger SET a = a + 1 RETURNING *;
 a 
---
 2
(1 row)

SELECT tableoid::regclass, * FROM o_test_cross_partition_update_trigger;
                   tableoid                   | a 
----------------------------------------------+---
 o_test_cross_partition_update_trigger_child2 | 2
(1 row)

TABLE o_test_cross_partition_update_trigger_fk;
 a 
---
 2
(1 row)

BEGIN;
CREATE TABLE o_test_partition_truncate (
  a int UNIQUE,
  b char
) PARTITION BY LIST (a);
CREATE TABLE o_test_partition_truncate2 (
  b char,
  a int unique
) USING orioledb;
ALTER TABLE o_test_partition_truncate
	ATTACH PARTITION o_test_partition_truncate2 FOR VALUES IN (3);
INSERT INTO o_test_partition_truncate VALUES (3, 'b');
TRUNCATE o_test_partition_truncate;
SELECT * FROM o_test_partition_truncate;
 a | b 
---+---
(0 rows)

COMMIT;
DROP EXTENSION orioledb CASCADE;
NOTICE:  drop cascades to 21 other objects
DETAIL:  drop cascades to table o_test_partition_on_conflict_range_child
drop cascades to table o_test_partition_on_conflict_list_child
drop cascades to table o_test_partition_on_conflict_update_same_trx_child
drop cascades to table o_test_cross_partition_update_child
drop cascades to table o_test_cross_partition_update_child2
drop cascades to table o_test_1
drop cascades to constraint o_test_2_val_1_val_2_fkey on table o_test_2
drop cascades to table o_test_3
drop cascades to table o_test_partition_index_child1
drop cascades to table o_test_partition_index_child2
drop cascades to table o_test_partition_pkey_update_child
drop cascades to table o_test_partition_multiple_moves_child1
drop cascades to table o_test_partition_multiple_moves_child2
drop cascades to table o_test_partition_multiple_moves_from
drop cascades to table o_test_partition_pkey_update_move_child1
drop cascades to table o_test_partition_pkey_update_move_child2
drop cascades to table o_test_partition_pkey_update_move_child3
drop cascades to table o_test_cross_partition_update_trigger_fk
drop cascades to table o_test_cross_partition_update_trigger_child1
drop cascades to table o_test_cross_partition_update_trigger_child2
drop cascades to table o_test_partition_truncate2
DROP SCHEMA partition CASCADE;
NOTICE:  drop cascades to 11 other objects
DETAIL:  drop cascades to table o_test_partition_on_conflict_range
drop cascades to table o_test_partition_on_conflict_list
drop cascades to table o_test_partition_on_conflict_update_same_trx
drop cascades to table o_test_cross_partition_update
drop cascades to table o_test_2
drop cascades to table o_test_partition_index
drop cascades to table o_test_partition_pkey_update
drop cascades to table o_test_partition_multiple_moves
drop cascades to table o_test_partition_pkey_update_move
drop cascades to table o_test_cross_partition_update_trigger
drop cascades to table o_test_partition_truncate
RESET search_path;
