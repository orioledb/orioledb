CREATE SCHEMA getsomeattrs;
SET SESSION search_path = 'getsomeattrs';
CREATE EXTENSION orioledb;
CREATE TABLE o_test_0
(
	id1 text NOT NULL,
	id2 float8 NOT NULL,
	PRIMARY KEY (id2, id1)
) USING orioledb;
CREATE UNIQUE INDEX o_test_0_idx ON o_test_0 (id1 DESC, id2 DESC);
INSERT INTO o_test_0
	SELECT repeat('x', a % 3) || repeat ('y', a % 2), a
		FROM generate_series(1, 5) as a;
EXPLAIN (COSTS off) SELECT * FROM o_test_0 ORDER BY id2, id1 LIMIT 5;
                      QUERY PLAN                       
-------------------------------------------------------
 Limit
   ->  Index Only Scan using o_test_0_pkey on o_test_0
(2 rows)

SELECT * FROM o_test_0 ORDER BY id2, id1 LIMIT 5;
 id1 | id2 
-----+-----
 xy  |   1
 xx  |   2
 y   |   3
 x   |   4
 xxy |   5
(5 rows)

EXPLAIN (COSTS off) SELECT id2, id1, id2 FROM o_test_0 ORDER BY id2, id1 LIMIT 5;
                      QUERY PLAN                       
-------------------------------------------------------
 Limit
   ->  Index Only Scan using o_test_0_pkey on o_test_0
(2 rows)

SELECT id2, id1, id2 FROM o_test_0 ORDER BY id2, id1 LIMIT 5;
 id2 | id1 | id2 
-----+-----+-----
   1 | xy  |   1
   2 | xx  |   2
   3 | y   |   3
   4 | x   |   4
   5 | xxy |   5
(5 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test_0 ORDER BY id1, id2;
                       QUERY PLAN                        
---------------------------------------------------------
 Index Only Scan Backward using o_test_0_idx on o_test_0
(1 row)

SELECT * FROM o_test_0 ORDER BY id1, id2;
 id1 | id2 
-----+-----
 x   |   4
 xx  |   2
 xxy |   5
 xy  |   1
 y   |   3
(5 rows)

CREATE TABLE o_test_1
(
	id1 float8 NOT NULL,
	id2 text NOT NULL,
	PRIMARY KEY(id1, id2)
) USING orioledb;
INSERT INTO o_test_1
	SELECT a, repeat('x', a % 3) || repeat ('y', a % 2)
		FROM generate_series(1, 5) as a;
EXPLAIN (COSTS off) SELECT * FROM o_test_1 ORDER BY id1, id2 LIMIT 5;
                      QUERY PLAN                       
-------------------------------------------------------
 Limit
   ->  Index Only Scan using o_test_1_pkey on o_test_1
(2 rows)

SELECT * FROM o_test_1 ORDER BY id1, id2 LIMIT 5;
 id1 | id2 
-----+-----
   1 | xy
   2 | xx
   3 | y
   4 | x
   5 | xxy
(5 rows)

CREATE TABLE o_test_2 (
	val_1 int2,
	val_2 int4,
	val_3 int8,
	PRIMARY KEY (val_3, val_2)
) USING orioledb;
ALTER TABLE o_test_2 DROP COLUMN val_1;
INSERT INTO o_test_2 VALUES (1, 2), (3, 4);
EXPLAIN (COSTS off) SELECT * FROM o_test_2 ORDER BY val_3, val_2;
                   QUERY PLAN                    
-------------------------------------------------
 Index Only Scan using o_test_2_pkey on o_test_2
(1 row)

SELECT * FROM o_test_2 ORDER BY val_3, val_2;
 val_2 | val_3 
-------+-------
     1 |     2
     3 |     4
(2 rows)

CREATE TABLE o_test_3 (
	val_1 int,
	val_2 int,
	PRIMARY KEY (val_2, val_1)
) USING orioledb;
INSERT INTO o_test_3 VALUES (1, 2), (3, 4);
EXPLAIN (COSTS off) SELECT * FROM o_test_3 ORDER BY val_2;
                   QUERY PLAN                    
-------------------------------------------------
 Index Only Scan using o_test_3_pkey on o_test_3
(1 row)

SELECT * FROM o_test_3 ORDER BY val_2;
 val_1 | val_2 
-------+-------
     1 |     2
     3 |     4
(2 rows)

CREATE TABLE o_test_4 (
	id integer NOT NULL,
	val integer,
	PRIMARY KEY(id)
) USING orioledb;
INSERT INTO o_test_4 (id, val) VALUES (1, 2);
INSERT INTO o_test_4 (id, val) VALUES (3, 4);
EXPLAIN (COSTS OFF) SELECT * FROM o_test_4;
      QUERY PLAN      
----------------------
 Seq Scan on o_test_4
(1 row)

SELECT * FROM o_test_4;
 id | val 
----+-----
  1 |   2
  3 |   4
(2 rows)

DELETE FROM o_test_4 where val = 2;
SELECT * FROM o_test_4;
 id | val 
----+-----
  3 |   4
(1 row)

CREATE TABLE o_test_4a (
	id int2 NOT NULL,
	val int4,
	PRIMARY KEY(id)
) USING orioledb;
INSERT INTO o_test_4a (id, val) VALUES (1, 2);
INSERT INTO o_test_4a (id, val) VALUES (3, 4);
EXPLAIN (COSTS OFF) SELECT * FROM o_test_4a;
      QUERY PLAN       
-----------------------
 Seq Scan on o_test_4a
(1 row)

SELECT * FROM o_test_4a;
 id | val 
----+-----
  1 |   2
  3 |   4
(2 rows)

DELETE FROM o_test_4a where val = 2;
SELECT * FROM o_test_4a;
 id | val 
----+-----
  3 |   4
(1 row)

CREATE TABLE o_test_5 (
	id integer NOT NULL,
	val text NOT NULL,
	PRIMARY KEY(id),
	UNIQUE(id, val)
) USING orioledb;
INSERT INTO o_test_5(id, val) VALUES (1, 'hello');
INSERT INTO o_test_5(id, val) VALUES (2, 'hey');
EXPLAIN (COSTS off) DELETE FROM o_test_5 where id = 1;
                       QUERY PLAN                       
--------------------------------------------------------
 Delete on o_test_5
   ->  Index Scan using o_test_5_id_val_key on o_test_5
         Index Cond: (id = 1)
(3 rows)

DELETE FROM o_test_5 where id = 1;
CREATE TABLE o_test_6
(
	id1 int8 NOT NULL,
	id2 int8 NOT NULL,
	PRIMARY KEY(id1)
) USING orioledb;
CREATE UNIQUE INDEX o_test_6_uniq6 on o_test_6(id2);
INSERT INTO o_test_6 VALUES (1, 2);
EXPLAIN (COSTS off)
	INSERT INTO o_test_6 VALUES (1, 9)
		ON CONFLICT (id1) DO UPDATE SET id1 = 10 RETURNING *;
                QUERY PLAN                 
-------------------------------------------
 Insert on o_test_6
   Conflict Resolution: UPDATE
   Conflict Arbiter Indexes: o_test_6_pkey
   ->  Result
(4 rows)

INSERT INTO o_test_6 VALUES (1, 9)
	ON CONFLICT (id1) DO UPDATE SET id1 = 10 RETURNING *;
 id1 | id2 
-----+-----
  10 |   2
(1 row)

EXPLAIN (COSTS off)
	INSERT INTO o_test_6 VALUES (9, 2)
		ON CONFLICT (id2) DO UPDATE SET id2 = 10 RETURNING *;
                 QUERY PLAN                 
--------------------------------------------
 Insert on o_test_6
   Conflict Resolution: UPDATE
   Conflict Arbiter Indexes: o_test_6_uniq6
   ->  Result
(4 rows)

INSERT INTO o_test_6 VALUES (9, 2)
	ON CONFLICT (id2) DO UPDATE SET id2 = 10 RETURNING *;
 id1 | id2 
-----+-----
  10 |  10
(1 row)

CREATE FUNCTION pseudo_random(seed bigint, i bigint) RETURNS float8 AS
$$
	SELECT substr(sha256(($1::text || ' ' || $2::text)::bytea)::text,2,16)::bit(52)::bigint::float8 / pow(2.0, 52.0);
$$ LANGUAGE sql;
CREATE TABLE o_test_7
(
	id bigserial,
	id2 bigserial,
	i int,
	PRIMARY KEY (id, id2)
) USING orioledb;
ALTER SEQUENCE o_test_7_id_seq RESTART WITH 100000;
ALTER SEQUENCE o_test_7_id2_seq RESTART WITH 200000;
INSERT INTO o_test_7 (i)
	SELECT pseudo_random(7, v) * 20000 FROM generate_series(1,5) v;
CREATE INDEX o_test_7_ix1 ON o_test_7 (i);
SELECT * FROM o_test_7;
   id   |  id2   |   i   
--------+--------+-------
 100000 | 200000 |  8296
 100001 | 200001 | 10647
 100002 | 200002 |  1191
 100003 | 200003 | 10461
 100004 | 200004 | 16582
(5 rows)

BEGIN;
SET LOCAL enable_seqscan = off;
EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_7 ORDER BY i;
                   QUERY PLAN                   
------------------------------------------------
 Index Only Scan using o_test_7_ix1 on o_test_7
(1 row)

SELECT * FROM o_test_7 ORDER BY i;
   id   |  id2   |   i   
--------+--------+-------
 100002 | 200002 |  1191
 100000 | 200000 |  8296
 100003 | 200003 | 10461
 100001 | 200001 | 10647
 100004 | 200004 | 16582
(5 rows)

COMMIT;
CREATE TABLE o_test_8
(
	id1 text NOT NULL,
	id2 float8 NOT NULL
) USING orioledb;
CREATE UNIQUE INDEX o_test_8_idx1 ON o_test_8 (id2, id1);
CREATE UNIQUE INDEX o_test_8_idx2 ON o_test_8 (id1 DESC, id2 DESC);
INSERT INTO o_test_8
	SELECT repeat('x', a % 3) || repeat ('y', a % 2), a
		FROM generate_series(1, 5) as a;
EXPLAIN (COSTS off) SELECT * FROM o_test_8 ORDER BY id2, id1 LIMIT 5;
                      QUERY PLAN                       
-------------------------------------------------------
 Limit
   ->  Index Only Scan using o_test_8_idx1 on o_test_8
(2 rows)

SELECT * FROM o_test_8 ORDER BY id2, id1 LIMIT 5;
 id1 | id2 
-----+-----
 xy  |   1
 xx  |   2
 y   |   3
 x   |   4
 xxy |   5
(5 rows)

EXPLAIN (COSTS off) SELECT id2, id1, id2 FROM o_test_8 ORDER BY id2, id1 LIMIT 5;
                      QUERY PLAN                       
-------------------------------------------------------
 Limit
   ->  Index Only Scan using o_test_8_idx1 on o_test_8
(2 rows)

SELECT id2, id1, id2 FROM o_test_8 ORDER BY id2, id1 LIMIT 5;
 id2 | id1 | id2 
-----+-----+-----
   1 | xy  |   1
   2 | xx  |   2
   3 | y   |   3
   4 | x   |   4
   5 | xxy |   5
(5 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test_8 ORDER BY id1, id2;
                        QUERY PLAN                        
----------------------------------------------------------
 Index Only Scan Backward using o_test_8_idx2 on o_test_8
(1 row)

SELECT * FROM o_test_8 ORDER BY id1, id2;
 id1 | id2 
-----+-----
 x   |   4
 xx  |   2
 xxy |   5
 xy  |   1
 y   |   3
(5 rows)

CREATE TABLE o_test_9
(
	id1 float8 NOT NULL,
	id2 text NOT NULL
) USING orioledb;
CREATE UNIQUE INDEX o_test_9_idx1 ON o_test_9 (id1, id2);
INSERT INTO o_test_9
	SELECT a, repeat('x', a % 3) || repeat ('y', a % 2)
		FROM generate_series(1, 5) as a;
EXPLAIN (COSTS off) SELECT * FROM o_test_9 ORDER BY id1, id2 LIMIT 5;
                      QUERY PLAN                       
-------------------------------------------------------
 Limit
   ->  Index Only Scan using o_test_9_idx1 on o_test_9
(2 rows)

SELECT * FROM o_test_9 ORDER BY id1, id2 LIMIT 5;
 id1 | id2 
-----+-----
   1 | xy
   2 | xx
   3 | y
   4 | x
   5 | xxy
(5 rows)

CREATE TABLE o_test_10 (
	val_1 int,
	val_2 int,
	val_3 int
) USING orioledb;
CREATE UNIQUE INDEX o_test_10_idx1 ON o_test_10 (val_3, val_2);
ALTER TABLE o_test_10 DROP COLUMN val_1;
INSERT INTO o_test_10 VALUES (1, 2), (3, 4);
EXPLAIN (COSTS off) SELECT * FROM o_test_10 ORDER BY val_3, val_2;
                    QUERY PLAN                     
---------------------------------------------------
 Index Only Scan using o_test_10_idx1 on o_test_10
(1 row)

SELECT * FROM o_test_10 ORDER BY val_3, val_2;
 val_2 | val_3 
-------+-------
     1 |     2
     3 |     4
(2 rows)

CREATE TABLE o_test_11 (
	val_1 int,
	val_2 int
) USING orioledb;
CREATE UNIQUE INDEX o_test_11_idx1 ON o_test_11 (val_2, val_1);
INSERT INTO o_test_11 VALUES (1, 2), (3, 4);
EXPLAIN (COSTS off) SELECT * FROM o_test_11 ORDER BY val_2;
                    QUERY PLAN                     
---------------------------------------------------
 Index Only Scan using o_test_11_idx1 on o_test_11
(1 row)

SELECT * FROM o_test_11 ORDER BY val_2;
 val_1 | val_2 
-------+-------
     1 |     2
     3 |     4
(2 rows)

CREATE TABLE o_test_12 (
	id integer NOT NULL,
	val integer
) USING orioledb;
CREATE UNIQUE INDEX o_test_12_idx1 ON o_test_12 (id);
INSERT INTO o_test_12 (id, val) VALUES (1, 2);
INSERT INTO o_test_12 (id, val) VALUES (3, 4);
SELECT * FROM o_test_12;
 id | val 
----+-----
  1 |   2
  3 |   4
(2 rows)

DELETE FROM o_test_12 where val = 2;
SELECT * FROM o_test_12;
 id | val 
----+-----
  3 |   4
(1 row)

CREATE TABLE o_test_13 (
	id integer NOT NULL,
	val text NOT NULL
) USING orioledb;
CREATE UNIQUE INDEX o_test_13_idx1 ON o_test_13 (id);
CREATE UNIQUE INDEX o_test_13_idx2 ON o_test_13 (id, val);
INSERT INTO o_test_13(id, val) VALUES (1, 'hello');
INSERT INTO o_test_13(id, val) VALUES (2, 'hey');
EXPLAIN (COSTS off) DELETE FROM o_test_13 where id = 1;
                     QUERY PLAN                     
----------------------------------------------------
 Delete on o_test_13
   ->  Index Scan using o_test_13_idx2 on o_test_13
         Index Cond: (id = 1)
(3 rows)

DELETE FROM o_test_13 where id = 1;
CREATE TABLE o_test_14
(
	id1 int8 NOT NULL,
	id2 int8 NOT NULL
) USING orioledb;
CREATE UNIQUE INDEX o_test_14_idx1 ON o_test_14 (id1);
CREATE UNIQUE INDEX o_test_14_uniq6 on o_test_14(id2);
INSERT INTO o_test_14 VALUES (1, 2);
EXPLAIN (COSTS off)
	INSERT INTO o_test_14 VALUES (1, 9)
		ON CONFLICT (id1) DO UPDATE SET id1 = 10 RETURNING *;
                 QUERY PLAN                 
--------------------------------------------
 Insert on o_test_14
   Conflict Resolution: UPDATE
   Conflict Arbiter Indexes: o_test_14_idx1
   ->  Result
(4 rows)

INSERT INTO o_test_14 VALUES (1, 9)
	ON CONFLICT (id1) DO UPDATE SET id1 = 10 RETURNING *;
 id1 | id2 
-----+-----
  10 |   2
(1 row)

EXPLAIN (COSTS off)
	INSERT INTO o_test_14 VALUES (9, 2)
		ON CONFLICT (id2) DO UPDATE SET id2 = 10 RETURNING *;
                 QUERY PLAN                  
---------------------------------------------
 Insert on o_test_14
   Conflict Resolution: UPDATE
   Conflict Arbiter Indexes: o_test_14_uniq6
   ->  Result
(4 rows)

INSERT INTO o_test_14 VALUES (9, 2)
	ON CONFLICT (id2) DO UPDATE SET id2 = 10 RETURNING *;
 id1 | id2 
-----+-----
  10 |  10
(1 row)

CREATE FUNCTION pseudo_random(seed bigint, i bigint) RETURNS float8 AS
$$
	SELECT substr(sha256(($1::text || ' ' || $2::text)::bytea)::text,2,16)::bit(52)::bigint::float8 / pow(2.0, 52.0);
$$ LANGUAGE sql;
ERROR:  function "pseudo_random" already exists with same argument types
CREATE TABLE o_test_15
(
	id bigserial,
	id2 bigserial,
	i int
) USING orioledb;
CREATE UNIQUE INDEX o_test_15_idx1 ON o_test_15 (id, id2);
ALTER SEQUENCE o_test_15_id_seq RESTART WITH 100000;
ALTER SEQUENCE o_test_15_id2_seq RESTART WITH 200000;
INSERT INTO o_test_15 (i)
	SELECT pseudo_random(7, v) * 20000 FROM generate_series(1,5) v;
CREATE INDEX o_test_15_ix1 ON o_test_15 (i);
SELECT * FROM o_test_15;
   id   |  id2   |   i   
--------+--------+-------
 100000 | 200000 |  8296
 100001 | 200001 | 10647
 100002 | 200002 |  1191
 100003 | 200003 | 10461
 100004 | 200004 | 16582
(5 rows)

BEGIN;
SET LOCAL enable_seqscan = off;
EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_15 ORDER BY i;
                 QUERY PLAN                  
---------------------------------------------
 Index Scan using o_test_15_ix1 on o_test_15
(1 row)

SELECT * FROM o_test_15 ORDER BY i;
   id   |  id2   |   i   
--------+--------+-------
 100002 | 200002 |  1191
 100000 | 200000 |  8296
 100003 | 200003 | 10461
 100001 | 200001 | 10647
 100004 | 200004 | 16582
(5 rows)

COMMIT;
CREATE TABLE o_test_16
(
	id serial primary key,
	i int4
) USING orioledb;
CREATE SEQUENCE o_test_16_j_seq;
INSERT INTO o_test_16 (i) SELECT generate_series(1,2);
ALTER TABLE o_test_16 ADD COLUMN y int4;
SELECT * FROM o_test_16;
 id | i | y 
----+---+---
  1 | 1 |  
  2 | 2 |  
(2 rows)

ALTER TABLE o_test_16
	ADD COLUMN j int4 not null default nextval('o_test_16_j_seq');
SELECT * FROM o_test_16;
 id | i | y | j 
----+---+---+---
  1 | 1 |   | 1
  2 | 2 |   | 2
(2 rows)

CREATE TABLE o_test_17 (
	val_1 int,
	val_1a int,
	val_2 int,
	val_3 int,
	PRIMARY KEY(val_1a, val_1) INCLUDE(val_3, val_2)
) USING orioledb;
INSERT INTO o_test_17 SELECT v, v * 10, NULL, NULL FROM generate_series(1,2) v;
SELECT * FROM o_test_17;
 val_1 | val_1a | val_2 | val_3 
-------+--------+-------+-------
     1 |     10 |       |      
     2 |     20 |       |      
(2 rows)

SELECT * FROM o_test_17 WHERE (val_1) < (2);
 val_1 | val_1a | val_2 | val_3 
-------+--------+-------+-------
     1 |     10 |       |      
(1 row)

BEGIN;
create table o_test_getsomeattrs_pkey_ix_order (
	id bigint PRIMARY KEY,
	val int
) USING orioledb;
CREATE INDEX ON o_test_getsomeattrs_pkey_ix_order(val);
INSERT INTO o_test_getsomeattrs_pkey_ix_order
	VALUES (1, 1), (2, NULL), (3, NULL);
SET LOCAL enable_seqscan = off;
SET LOCAL enable_bitmapscan = off;
EXPLAIN (COSTS off)
	SELECT id FROM o_test_getsomeattrs_pkey_ix_order WHERE id > 0;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Index Only Scan using o_test_getsomeattrs_pkey_ix_order_pkey on o_test_getsomeattrs_pkey_ix_order
   Index Cond: (id > 0)
(2 rows)

SELECT id FROM o_test_getsomeattrs_pkey_ix_order WHERE id > 0;
 id 
----
  1
  2
  3
(3 rows)

EXPLAIN (COSTS off)
	SELECT id FROM o_test_getsomeattrs_pkey_ix_order
		WHERE id IS NOT NULL ORDER BY id;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Index Only Scan using o_test_getsomeattrs_pkey_ix_order_pkey on o_test_getsomeattrs_pkey_ix_order
   Index Cond: (id IS NOT NULL)
(2 rows)

SELECT id FROM o_test_getsomeattrs_pkey_ix_order
	WHERE id IS NOT NULL ORDER BY id;
 id 
----
  1
  2
  3
(3 rows)

COMMIT;
BEGIN;
CREATE TABLE o_test_getsomeattrs_pkey_nkeys_not_equal_nFields (
  val_1 INT PRIMARY KEY,
  val_2 text
) USING orioledb;
INSERT INTO o_test_getsomeattrs_pkey_nkeys_not_equal_nFields
	VALUES (1, 'a'), (2, 'b');
SET LOCAL enable_seqscan = off;
SET LOCAL enable_bitmapscan = off;
EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_getsomeattrs_pkey_nkeys_not_equal_nFields
		GROUP BY val_1;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Group
   Group Key: val_1
   ->  Index Scan using o_test_getsomeattrs_pkey_nkeys_not_equal_nfields_pkey on o_test_getsomeattrs_pkey_nkeys_not_equal_nfields
(3 rows)

SELECT * FROM o_test_getsomeattrs_pkey_nkeys_not_equal_nFields
	GROUP BY val_1;
 val_1 | val_2 
-------+-------
     1 | a
     2 | b
(2 rows)

COMMIT;
CREATE TABLE o_test_unique_same_layout_as_pkey
(
	val1 int,
	val2 text,
	PRIMARY KEY (val1, val2)
) USING orioledb;
CREATE UNIQUE INDEX o_test_unique_same_layout_as_pkey_idx1 ON o_test_unique_same_layout_as_pkey (val1, val1);
SELECT orioledb_table_description('o_test_unique_same_layout_as_pkey'::regclass);
                orioledb_table_description                 
-----------------------------------------------------------
 Compress = -1, Primary compress = -1, TOAST compress = -1+
  Column |    Type | Collation | Nullable | Droped        +
    val1 | integer |    (null) |    false |  false        +
    val2 |    text |   default |    false |  false        +
 
(1 row)

SELECT orioledb_tbl_indices('o_test_unique_same_layout_as_pkey'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test_unique_same_layout_as_pkey_pkey  +
     Index type: primary, unique               +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: val1, val2         +
 Index o_test_unique_same_layout_as_pkey_idx1  +
     Index type: secondary, unique             +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: val1, val2         +
     Leaf tuple fields: val1, val2             +
 
(1 row)

INSERT INTO o_test_unique_same_layout_as_pkey VALUES (0, 0);
DROP EXTENSION orioledb CASCADE;
NOTICE:  drop cascades to 22 other objects
DETAIL:  drop cascades to table o_test_0
drop cascades to table o_test_1
drop cascades to table o_test_2
drop cascades to table o_test_3
drop cascades to table o_test_4
drop cascades to table o_test_4a
drop cascades to table o_test_5
drop cascades to table o_test_6
drop cascades to table o_test_7
drop cascades to table o_test_8
drop cascades to table o_test_9
drop cascades to table o_test_10
drop cascades to table o_test_11
drop cascades to table o_test_12
drop cascades to table o_test_13
drop cascades to table o_test_14
drop cascades to table o_test_15
drop cascades to table o_test_16
drop cascades to table o_test_17
drop cascades to table o_test_getsomeattrs_pkey_ix_order
drop cascades to table o_test_getsomeattrs_pkey_nkeys_not_equal_nfields
drop cascades to table o_test_unique_same_layout_as_pkey
DROP SCHEMA getsomeattrs CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to function pseudo_random(bigint,bigint)
drop cascades to sequence o_test_16_j_seq
RESET search_path;
