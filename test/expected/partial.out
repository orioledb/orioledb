CREATE SCHEMA partial;
SET SESSION search_path = 'partial';
CREATE EXTENSION orioledb;
CREATE FUNCTION my_cmp_plpgsql(a int, b int) RETURNS int AS $$
DECLARE
	a_tr int := (a::bit(5) & X'A8'::bit(5))::int;
	b_tr int := (b::bit(5) & X'A8'::bit(5))::int;
BEGIN
	RETURN btint4cmp(a_tr, b_tr);
END
$$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION my_cmp_sql(a int, b int) RETURNS int AS $$
	SELECT btint4cmp((a::bit(5) & X'A8'::bit(5))::int,
					(b::bit(5) & X'A8'::bit(5))::int);
$$ LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION my_cmp_sql_sql(a int, b int) RETURNS int AS $$
	SELECT extract(epoch from current_timestamp)::integer +
		   my_cmp_sql(a, b);
$$ LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION my_cmp_sql_plpgsql(a int, b int) RETURNS int AS $$
	SELECT my_cmp_plpgsql(a, b);
$$ LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION my_cmp_sql_sql_sql(a int, b int) RETURNS int AS $$
	SELECT my_cmp_sql_sql(a, b);
$$ LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION my_cmp_sql_sql_plpgsql(a int, b int) RETURNS int AS $$
	SELECT my_cmp_sql_plpgsql(a, b);
$$ LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION my_cmp_sql_body(a int, b int) RETURNS int
	LANGUAGE SQL IMMUTABLE
BEGIN ATOMIC
	SELECT btint4cmp((a::bit(5) & X'A8'::bit(5))::int,
					(b::bit(5) & X'A8'::bit(5))::int);
END;
CREATE FUNCTION my_cmp_inter(a int, b int) RETURNS int
	AS 'btint4cmp'
	LANGUAGE internal;
CREATE FUNCTION my_c_func(a int, b int)
	RETURNS int8
	AS 'orioledb', 'orioledb_compression_max_level'
	LANGUAGE C STRICT IMMUTABLE;
CREATE FUNCTION my_eq_p_p(a int, b int) RETURNS bool AS $$
BEGIN
	RETURN my_cmp_plpgsql(a, b) = 0;
END
$$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION my_eq_p_s(a int, b int) RETURNS bool AS $$
BEGIN
	RETURN my_cmp_sql(a, b) = 0;
END
$$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION my_eq_p_sb(a int, b int) RETURNS bool AS $$
BEGIN
	RETURN my_cmp_sql_body(a, b) = 0;
END
$$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION my_eq_p_i(a int, b int) RETURNS bool AS $$
BEGIN
	RETURN my_cmp_inter(a, b) = 0;
END
$$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION my_eq_p_b(a int, b int) RETURNS bool AS $$
BEGIN
	RETURN btint4cmp(a, b) = 0;
END
$$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION my_eq_p_c(a int, b int) RETURNS bool AS $$
BEGIN
	RETURN ((a % (my_c_func(a, b) - 20)) -
			(b % (my_c_func(a, b) - 20))) = 0;
END
$$ LANGUAGE plpgsql IMMUTABLE;
CREATE FUNCTION my_eq_s_p(a int, b int) RETURNS bool AS $$
	SELECT my_cmp_plpgsql(a, b) = 0;
$$ LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION my_eq_s_s(a int, b int) RETURNS bool AS $$
	SELECT my_cmp_sql(a, b) = 0;
$$ LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION my_eq_s_s_s_s(a int, b int) RETURNS bool AS $$
	SELECT my_cmp_sql_sql_sql(a, b) = 0;
$$ LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION my_eq_s_s_s_p(a int, b int) RETURNS bool AS $$
	SELECT my_cmp_sql_sql_plpgsql(a, b) = 0;
$$ LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION my_eq_s_sb(a int, b int) RETURNS bool AS $$
	SELECT my_cmp_sql_body(a, b) = 0;
$$ LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION my_eq_s_i(a int, b int) RETURNS bool AS $$
	SELECT my_cmp_inter(a, b) = 0;
$$ LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION my_eq_s_b(a int, b int) RETURNS bool AS $$
	SELECT btint4cmp(a, b) = 0;
$$ LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION my_eq_s_c(a int, b int) RETURNS bool AS $$
	SELECT ((a % (my_c_func(a, b) - 20)) -
			(b % (my_c_func(a, b) - 20))) = 0;
$$ LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION my_eq_sb_p(a int, b int) RETURNS bool
	LANGUAGE SQL IMMUTABLE
BEGIN ATOMIC
	SELECT my_cmp_plpgsql(a, b) = 0;
END;
CREATE FUNCTION my_eq_sb_s(a int, b int) RETURNS bool
	LANGUAGE SQL IMMUTABLE
BEGIN ATOMIC
	SELECT my_cmp_sql(a, b) = 0;
END;
CREATE FUNCTION my_eq_sb_sb(a int, b int) RETURNS bool
	LANGUAGE SQL IMMUTABLE
BEGIN ATOMIC
	SELECT my_cmp_sql_body(a, b) = 0;
END;
CREATE FUNCTION my_eq_sb_i(a int, b int) RETURNS bool
	LANGUAGE SQL IMMUTABLE
BEGIN ATOMIC
	SELECT my_cmp_inter(a, b) = 0;
END;
CREATE FUNCTION my_eq_sb_b(a int, b int) RETURNS bool
	LANGUAGE SQL IMMUTABLE
BEGIN ATOMIC
	SELECT btint4cmp(a, b) = 0;
END;
CREATE FUNCTION my_eq_sb_c(a int, b int) RETURNS bool
	LANGUAGE SQL IMMUTABLE
BEGIN ATOMIC
	SELECT ((a % (my_c_func(a, b) - 20)) -
			(b % (my_c_func(a, b) - 20))) = 0;
END;
CREATE FUNCTION my_eq_i(a int, b int) RETURNS bool
	AS 'int4eq'
	LANGUAGE internal IMMUTABLE;
CREATE TABLE o_test_sql_func (
	val int
) USING orioledb;
CREATE INDEX o_test_sql_func_ix_p_p ON
	o_test_sql_func(val) WHERE (my_eq_p_p(val, val + 10));
ERROR:  function "my_eq_p_p" cannot be used here
HINT:  only C and SQL functions are supported in orioledb index predicate
CREATE INDEX o_test_sql_func_ix_p_s ON
	o_test_sql_func(val) WHERE (my_eq_p_s(val, val + 10));
ERROR:  function "my_eq_p_s" cannot be used here
HINT:  only C and SQL functions are supported in orioledb index predicate
CREATE INDEX o_test_sql_func_ix_p_sb ON
	o_test_sql_func(val) WHERE (my_eq_p_sb(val, val + 10));
ERROR:  function "my_eq_p_sb" cannot be used here
HINT:  only C and SQL functions are supported in orioledb index predicate
CREATE INDEX o_test_sql_func_ix_p_i ON
	o_test_sql_func(val) WHERE (my_eq_p_i(val % 2, 0));
ERROR:  function "my_eq_p_i" cannot be used here
HINT:  only C and SQL functions are supported in orioledb index predicate
CREATE INDEX o_test_sql_func_ix_p_b ON
	o_test_sql_func(val) WHERE (my_eq_p_b(val % 3, 0));
ERROR:  function "my_eq_p_b" cannot be used here
HINT:  only C and SQL functions are supported in orioledb index predicate
CREATE INDEX o_test_sql_func_ix_p_c ON
	o_test_sql_func(val) WHERE (my_eq_p_c(val % 4, 0));
ERROR:  function "my_eq_p_c" cannot be used here
HINT:  only C and SQL functions are supported in orioledb index predicate
CREATE INDEX o_test_sql_func_ix_s_p ON
	o_test_sql_func(val) WHERE (my_eq_s_p(val, val + 10));
ERROR:  function "my_cmp_plpgsql" cannot be used here
HINT:  only C and SQL functions are supported in orioledb index predicate
CREATE INDEX o_test_sql_func_ix_s_s ON
	o_test_sql_func(val) WHERE (my_eq_s_s(val, val * 11));
CREATE INDEX o_test_sql_func_ix_s_s_s_s ON
	o_test_sql_func(val) WHERE (my_eq_s_s_s_s(val, val * 11));
ERROR:  function "extract" cannot be used here
HINT:  only immutable functions are supported in orioledb index predicate
CONTEXT:  SQL function "my_cmp_sql_sql" during body validation
CREATE INDEX o_test_sql_func_ix_s_s_s_p ON
	o_test_sql_func(val) WHERE (my_eq_s_s_s_p(val, val * 11));
ERROR:  function "my_cmp_plpgsql" cannot be used here
HINT:  only C and SQL functions are supported in orioledb index predicate
CREATE INDEX o_test_sql_func_ix_s_sb ON
	o_test_sql_func(val) WHERE (my_eq_s_sb(val, val * 11));
CREATE INDEX o_test_sql_func_ix_s_i ON
	o_test_sql_func(val) WHERE (my_eq_s_i(val % 2, 0));
ERROR:  function "my_cmp_inter" cannot be used here
HINT:  only immutable functions are supported in orioledb index predicate
CONTEXT:  SQL function "my_eq_s_i" during body validation
CREATE INDEX o_test_sql_func_ix_s_b ON
	o_test_sql_func(val) WHERE (my_eq_s_b(val % 3, 0));
CREATE INDEX o_test_sql_func_ix_s_c ON
	o_test_sql_func(val) WHERE (my_eq_s_c(val % 2, 1));
CREATE INDEX o_test_sql_func_ix_sb_p ON
	o_test_sql_func(val) WHERE (my_eq_sb_p(val, val + 10));
ERROR:  function "my_cmp_plpgsql" cannot be used here
HINT:  only C and SQL functions are supported in orioledb index predicate
CREATE INDEX o_test_sql_func_ix_sb_s ON
	o_test_sql_func(val) WHERE (my_eq_sb_s(val, val * 11));
CREATE INDEX o_test_sql_func_ix_sb_sb ON
	o_test_sql_func(val) WHERE (my_eq_sb_sb(val, val * 11));
CREATE INDEX o_test_sql_func_ix_sb_i ON
	o_test_sql_func(val) WHERE (my_eq_sb_i(val % 2, 0));
ERROR:  function "my_cmp_inter" cannot be used here
HINT:  only immutable functions are supported in orioledb index predicate
CONTEXT:  SQL function "my_eq_sb_i" during body validation
CREATE INDEX o_test_sql_func_ix_sb_b ON
	o_test_sql_func(val) WHERE (my_eq_sb_b(val % 3, 0));
CREATE INDEX o_test_sql_func_ix_sb_c ON
	o_test_sql_func(val) WHERE (my_eq_sb_c(val % 2, 1));
CREATE INDEX o_test_sql_func_ix_i ON
	o_test_sql_func(val) WHERE (my_eq_i(val % 4, 2));
CREATE INDEX o_test_sql_func_ix_b ON
	o_test_sql_func(val) WHERE (int4eq(val % 4, 3));
CREATE INDEX o_test_sql_func_ix_c ON
	o_test_sql_func(val) WHERE ((val % (my_c_func(val,
														   val + 1) - 18)) =
								0);
CREATE SEQUENCE o_test_sql_func_seq;
CREATE INDEX o_test_sql_func_ix_nv ON
	o_test_sql_func(val) WHERE (nextval('o_test_sql_func_seq') % 2 = 0);
ERROR:  functions in index predicate must be marked IMMUTABLE
CREATE INDEX o_test_sql_func_ix_ss ON
	o_test_sql_func(((SELECT * FROM generate_series(1, 10) LIMIT 1) = val));
ERROR:  cannot use subquery in index expression
LINE 2:  o_test_sql_func(((SELECT * FROM generate_series(1, 10) LIMI...
                          ^
INSERT INTO o_test_sql_func SELECT generate_series(1, 10);
SELECT * FROM o_test_sql_func;
 val 
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
(10 rows)

SELECT orioledb_tbl_structure('o_test_sql_func'::regclass, 'nue');
                       orioledb_tbl_structure                        
---------------------------------------------------------------------
 Index ctid_primary contents                                        +
 Page 0: level = 0, maxKeyLen = 8, nVacatedBytes = 0                +
 state = free, datoid equal, relnode equal, ix_type = primary, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 280, tuple = ('(0,1)', '1')                   +
     Item 1: offset = 312, tuple = ('(0,2)', '2')                   +
     Item 2: offset = 344, tuple = ('(0,3)', '3')                   +
     Item 3: offset = 376, tuple = ('(0,4)', '4')                   +
     Item 4: offset = 408, tuple = ('(0,5)', '5')                   +
     Item 5: offset = 440, tuple = ('(0,6)', '6')                   +
     Item 6: offset = 472, tuple = ('(0,7)', '7')                   +
     Item 7: offset = 504, tuple = ('(0,8)', '8')                   +
     Item 8: offset = 536, tuple = ('(0,9)', '9')                   +
     Item 9: offset = 568, tuple = ('(0,10)', '10')                 +
                                                                    +
 Index o_test_sql_func_ix_s_s contents                              +
 Page 0: level = 0, maxKeyLen = 16, nVacatedBytes = 0               +
 state = free, datoid equal, relnode equal, ix_type = regular, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 272, tuple = ('1', '(0,1)')                   +
     Item 1: offset = 304, tuple = ('3', '(0,3)')                   +
     Item 2: offset = 336, tuple = ('4', '(0,4)')                   +
     Item 3: offset = 368, tuple = ('7', '(0,7)')                   +
     Item 4: offset = 400, tuple = ('9', '(0,9)')                   +
                                                                    +
 Index o_test_sql_func_ix_s_sb contents                             +
 Page 0: level = 0, maxKeyLen = 16, nVacatedBytes = 0               +
 state = free, datoid equal, relnode equal, ix_type = regular, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 272, tuple = ('1', '(0,1)')                   +
     Item 1: offset = 304, tuple = ('3', '(0,3)')                   +
     Item 2: offset = 336, tuple = ('4', '(0,4)')                   +
     Item 3: offset = 368, tuple = ('7', '(0,7)')                   +
     Item 4: offset = 400, tuple = ('9', '(0,9)')                   +
                                                                    +
 Index o_test_sql_func_ix_s_b contents                              +
 Page 0: level = 0, maxKeyLen = 16, nVacatedBytes = 0               +
 state = free, datoid equal, relnode equal, ix_type = regular, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 264, tuple = ('3', '(0,3)')                   +
     Item 1: offset = 296, tuple = ('6', '(0,6)')                   +
     Item 2: offset = 328, tuple = ('9', '(0,9)')                   +
                                                                    +
 Index o_test_sql_func_ix_s_c contents                              +
 Page 0: level = 0, maxKeyLen = 16, nVacatedBytes = 0               +
 state = free, datoid equal, relnode equal, ix_type = regular, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 272, tuple = ('1', '(0,1)')                   +
     Item 1: offset = 304, tuple = ('3', '(0,3)')                   +
     Item 2: offset = 336, tuple = ('5', '(0,5)')                   +
     Item 3: offset = 368, tuple = ('7', '(0,7)')                   +
     Item 4: offset = 400, tuple = ('9', '(0,9)')                   +
                                                                    +
 Index o_test_sql_func_ix_sb_s contents                             +
 Page 0: level = 0, maxKeyLen = 16, nVacatedBytes = 0               +
 state = free, datoid equal, relnode equal, ix_type = regular, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 272, tuple = ('1', '(0,1)')                   +
     Item 1: offset = 304, tuple = ('3', '(0,3)')                   +
     Item 2: offset = 336, tuple = ('4', '(0,4)')                   +
     Item 3: offset = 368, tuple = ('7', '(0,7)')                   +
     Item 4: offset = 400, tuple = ('9', '(0,9)')                   +
                                                                    +
 Index o_test_sql_func_ix_sb_sb contents                            +
 Page 0: level = 0, maxKeyLen = 16, nVacatedBytes = 0               +
 state = free, datoid equal, relnode equal, ix_type = regular, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 272, tuple = ('1', '(0,1)')                   +
     Item 1: offset = 304, tuple = ('3', '(0,3)')                   +
     Item 2: offset = 336, tuple = ('4', '(0,4)')                   +
     Item 3: offset = 368, tuple = ('7', '(0,7)')                   +
     Item 4: offset = 400, tuple = ('9', '(0,9)')                   +
                                                                    +
 Index o_test_sql_func_ix_sb_b contents                             +
 Page 0: level = 0, maxKeyLen = 16, nVacatedBytes = 0               +
 state = free, datoid equal, relnode equal, ix_type = regular, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 264, tuple = ('3', '(0,3)')                   +
     Item 1: offset = 296, tuple = ('6', '(0,6)')                   +
     Item 2: offset = 328, tuple = ('9', '(0,9)')                   +
                                                                    +
 Index o_test_sql_func_ix_sb_c contents                             +
 Page 0: level = 0, maxKeyLen = 16, nVacatedBytes = 0               +
 state = free, datoid equal, relnode equal, ix_type = regular, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 272, tuple = ('1', '(0,1)')                   +
     Item 1: offset = 304, tuple = ('3', '(0,3)')                   +
     Item 2: offset = 336, tuple = ('5', '(0,5)')                   +
     Item 3: offset = 368, tuple = ('7', '(0,7)')                   +
     Item 4: offset = 400, tuple = ('9', '(0,9)')                   +
                                                                    +
 Index o_test_sql_func_ix_i contents                                +
 Page 0: level = 0, maxKeyLen = 16, nVacatedBytes = 0               +
 state = free, datoid equal, relnode equal, ix_type = regular, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 264, tuple = ('2', '(0,2)')                   +
     Item 1: offset = 296, tuple = ('6', '(0,6)')                   +
     Item 2: offset = 328, tuple = ('10', '(0,10)')                 +
                                                                    +
 Index o_test_sql_func_ix_b contents                                +
 Page 0: level = 0, maxKeyLen = 16, nVacatedBytes = 0               +
 state = free, datoid equal, relnode equal, ix_type = regular, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 264, tuple = ('3', '(0,3)')                   +
     Item 1: offset = 296, tuple = ('7', '(0,7)')                   +
                                                                    +
 Index o_test_sql_func_ix_c contents                                +
 Page 0: level = 0, maxKeyLen = 16, nVacatedBytes = 0               +
 state = free, datoid equal, relnode equal, ix_type = regular, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 264, tuple = ('4', '(0,4)')                   +
     Item 1: offset = 296, tuple = ('8', '(0,8)')                   +
                                                                    +
 Index toast: not loaded                                            +
 
(1 row)

DROP EXTENSION orioledb CASCADE;
NOTICE:  drop cascades to table o_test_sql_func
DROP SCHEMA partial CASCADE;
NOTICE:  drop cascades to 31 other objects
DETAIL:  drop cascades to function my_cmp_plpgsql(integer,integer)
drop cascades to function my_cmp_sql(integer,integer)
drop cascades to function my_cmp_sql_sql(integer,integer)
drop cascades to function my_cmp_sql_plpgsql(integer,integer)
drop cascades to function my_cmp_sql_sql_sql(integer,integer)
drop cascades to function my_cmp_sql_sql_plpgsql(integer,integer)
drop cascades to function my_cmp_sql_body(integer,integer)
drop cascades to function my_cmp_inter(integer,integer)
drop cascades to function my_c_func(integer,integer)
drop cascades to function my_eq_p_p(integer,integer)
drop cascades to function my_eq_p_s(integer,integer)
drop cascades to function my_eq_p_sb(integer,integer)
drop cascades to function my_eq_p_i(integer,integer)
drop cascades to function my_eq_p_b(integer,integer)
drop cascades to function my_eq_p_c(integer,integer)
drop cascades to function my_eq_s_p(integer,integer)
drop cascades to function my_eq_s_s(integer,integer)
drop cascades to function my_eq_s_s_s_s(integer,integer)
drop cascades to function my_eq_s_s_s_p(integer,integer)
drop cascades to function my_eq_s_sb(integer,integer)
drop cascades to function my_eq_s_i(integer,integer)
drop cascades to function my_eq_s_b(integer,integer)
drop cascades to function my_eq_s_c(integer,integer)
drop cascades to function my_eq_sb_p(integer,integer)
drop cascades to function my_eq_sb_s(integer,integer)
drop cascades to function my_eq_sb_sb(integer,integer)
drop cascades to function my_eq_sb_i(integer,integer)
drop cascades to function my_eq_sb_b(integer,integer)
drop cascades to function my_eq_sb_c(integer,integer)
drop cascades to function my_eq_i(integer,integer)
drop cascades to sequence o_test_sql_func_seq
RESET search_path;
