CREATE SCHEMA ddl;
SET SESSION search_path = 'ddl';
CREATE EXTENSION orioledb;
CREATE TABLE o_ddl_check
(
	f1 text,
	f2 varchar,
	f3 integer,
	PRIMARY KEY(f1)
) USING orioledb;
SELECT * FROM o_ddl_check;
 f1 | f2 | f3 
----+----+----
(0 rows)

INSERT INTO o_ddl_check VALUES ('1', NULL, NULL);
-- Fails because of NULL values
ALTER TABLE o_ddl_check ALTER f2 SET NOT NULL;
ERROR:  column "f2" of relation "o_ddl_check" contains null values
TRUNCATE o_ddl_check;
INSERT INTO o_ddl_check VALUES ('1', '2', NULL);
-- OK
ALTER TABLE o_ddl_check ALTER f2 SET NOT NULL;
DROP TABLE o_ddl_check;
SELECT orioledb_parallel_debug_start();
 orioledb_parallel_debug_start 
-------------------------------
 
(1 row)

CREATE TABLE o_ddl_check
(
	f1 text NOT NULL COLLATE "C",
	f2 varchar NOT NULL,
	f3 integer,
	PRIMARY KEY (f1)
) USING orioledb;
INSERT INTO o_ddl_check VALUES ('ABC1', 'ABC2', NULL);
-- Fails, because of NOT NULL constraint
INSERT INTO o_ddl_check VALUES ('2', NULL, '3');
ERROR:  null value in column "f2" of relation "o_ddl_check" violates not-null constraint
DETAIL:  Failing row contains (2, null, 3).
-- Fails, because of unique constraint
INSERT INTO o_ddl_check VALUES ('ABC1', '2', '3');
ERROR:  duplicate key value violates unique constraint "o_ddl_check_pkey"
DETAIL:  Key (f1)=('ABC1') already exists.
INSERT INTO o_ddl_check VALUES ('ABC2', 'ABC4', NULL);
INSERT INTO o_ddl_check VALUES ('ABC3', 'ABC6', NULL);
SELECT orioledb_parallel_debug_stop();
 orioledb_parallel_debug_stop 
------------------------------
 
(1 row)

SELECT * FROM o_ddl_check;
  f1  |  f2  | f3 
------+------+----
 ABC1 | ABC2 |   
 ABC2 | ABC4 |   
 ABC3 | ABC6 |   
(3 rows)

SELECT orioledb_table_description('o_ddl_check'::regclass);
                  orioledb_table_description                  
--------------------------------------------------------------
 Compress = -1, Primary compress = -1, TOAST compress = -1   +
  Column |              Type | Collation | Nullable | Droped +
      f1 |              text |         C |    false |  false +
      f2 | character varying |   default |    false |  false +
      f3 |           integer |    (null) |     true |  false +
 
(1 row)

-- Fails because can't drop NOT NULL contraint on PK
ALTER TABLE o_ddl_check ALTER f1 DROP NOT NULL;
ERROR:  column "f1" is in a primary key
SELECT orioledb_table_description('o_ddl_check'::regclass);
                  orioledb_table_description                  
--------------------------------------------------------------
 Compress = -1, Primary compress = -1, TOAST compress = -1   +
  Column |              Type | Collation | Nullable | Droped +
      f1 |              text |         C |    false |  false +
      f2 | character varying |   default |    false |  false +
      f3 |           integer |    (null) |     true |  false +
 
(1 row)

SELECT orioledb_tbl_indices('o_ddl_check'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_ddl_check_pkey                        +
     Index type: primary, unique               +
     Leaf tuple size: 3, non-leaf tuple size: 1+
     Non-leaf tuple fields: f1                 +
 
(1 row)

SELECT * FROM o_ddl_check;
  f1  |  f2  | f3 
------+------+----
 ABC1 | ABC2 |   
 ABC2 | ABC4 |   
 ABC3 | ABC6 |   
(3 rows)

-- Fails on unknown option
ALTER TABLE o_ddl_check OPTIONS (SET hello 'world');
ERROR:  "o_ddl_check" is not a foreign table
ALTER TABLE o_ddl_check ALTER f2 DROP NOT NULL;
SELECT orioledb_table_description('o_ddl_check'::regclass);
                  orioledb_table_description                  
--------------------------------------------------------------
 Compress = -1, Primary compress = -1, TOAST compress = -1   +
  Column |              Type | Collation | Nullable | Droped +
      f1 |              text |         C |    false |  false +
      f2 | character varying |   default |     true |  false +
      f3 |           integer |    (null) |     true |  false +
 
(1 row)

SELECT orioledb_tbl_indices('o_ddl_check'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_ddl_check_pkey                        +
     Index type: primary, unique               +
     Leaf tuple size: 3, non-leaf tuple size: 1+
     Non-leaf tuple fields: f1                 +
 
(1 row)

SELECT * FROM o_ddl_check;
  f1  |  f2  | f3 
------+------+----
 ABC1 | ABC2 |   
 ABC2 | ABC4 |   
 ABC3 | ABC6 |   
(3 rows)

ALTER TABLE o_ddl_check ALTER f2 SET NOT NULL;
SELECT orioledb_table_description('o_ddl_check'::regclass);
                  orioledb_table_description                  
--------------------------------------------------------------
 Compress = -1, Primary compress = -1, TOAST compress = -1   +
  Column |              Type | Collation | Nullable | Droped +
      f1 |              text |         C |    false |  false +
      f2 | character varying |   default |    false |  false +
      f3 |           integer |    (null) |     true |  false +
 
(1 row)

SELECT orioledb_tbl_indices('o_ddl_check'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_ddl_check_pkey                        +
     Index type: primary, unique               +
     Leaf tuple size: 3, non-leaf tuple size: 1+
     Non-leaf tuple fields: f1                 +
 
(1 row)

SELECT * FROM o_ddl_check;
  f1  |  f2  | f3 
------+------+----
 ABC1 | ABC2 |   
 ABC2 | ABC4 |   
 ABC3 | ABC6 |   
(3 rows)

ALTER TABLE o_ddl_check DROP f2;
ALTER TABLE o_ddl_check DROP f1;
SELECT orioledb_table_description('o_ddl_check'::regclass);
                  orioledb_table_description                  
--------------------------------------------------------------
 Compress = -1, Primary compress = -1, TOAST compress = -1   +
  Column |              Type | Collation | Nullable | Droped +
      f1 |              text |         C |    false |   true +
      f2 | character varying |   default |    false |   true +
      f3 |           integer |    (null) |     true |  false +
 
(1 row)

SELECT * FROM o_ddl_check;
 f3 
----
   
   
   
(3 rows)

DROP TABLE o_ddl_check;
CREATE TABLE o_ddl_check
(
	f1 varchar COLLATE "C",
	f2 text NOT NULL,
	PRIMARY KEY(f1)
) USING orioledb;
INSERT INTO o_ddl_check VALUES ('a', NULL);
ERROR:  null value in column "f2" of relation "o_ddl_check" violates not-null constraint
DETAIL:  Failing row contains (a, null).
INSERT INTO o_ddl_check VALUES (NULL, 'b');
ERROR:  null value in column "f1" of relation "o_ddl_check" violates not-null constraint
DETAIL:  Failing row contains (null, b).
INSERT INTO o_ddl_check VALUES ('a', 'b');
UPDATE o_ddl_check SET f1 = NULL WHERE f1 = 'a';
ERROR:  null value in column "f1" of relation "o_ddl_check" violates not-null constraint
DETAIL:  Failing row contains (null, b).
SELECT * FROM o_ddl_check;
 f1 | f2 
----+----
 a  | b
(1 row)

ALTER TABLE o_ddl_check ADD CHECK (f2 < 'f');
INSERT INTO o_ddl_check VALUES ('b', 'ddd');
INSERT INTO o_ddl_check VALUES ('c', 'ffff');
ERROR:  new row for relation "o_ddl_check" violates check constraint "o_ddl_check_f2_check"
DETAIL:  Failing row contains (c, ffff).
CREATE UNIQUE INDEX o_ddl_check_f2_idx ON o_ddl_check(f2);
ALTER TABLE o_ddl_check ALTER f2 DROP NOT NULL;
ALTER TABLE o_ddl_check ALTER f2 SET NOT NULL;
-- Check partition consraint.
CREATE TABLE o_ddl_parted
(
	f1 varchar COLLATE "C",
	f2 text NOT NULL
) PARTITION BY RANGE (f1);
ALTER TABLE o_ddl_parted ATTACH PARTITION o_ddl_check FOR VALUES FROM ('a') TO ('d');
SELECT * FROM o_ddl_parted;
 f1 | f2  
----+-----
 a  | b
 b  | ddd
(2 rows)

INSERT INTO o_ddl_parted VALUES ('abc', 'def');
-- OK
UPDATE o_ddl_parted SET f1 = 'bcd' WHERE f1 = 'abc';
-- Partition constraint failure
UPDATE o_ddl_parted SET f1 = 'efg' WHERE f1 = 'bcd';
ERROR:  no partition of relation "o_ddl_parted" found for row
DETAIL:  Partition key of the failing row contains (f1) = (efg).
SELECT * FROM o_ddl_parted;
 f1  | f2  
-----+-----
 a   | b
 b   | ddd
 bcd | def
(3 rows)

CREATE TABLE o_ddl_check_2
(
	f1 varchar COLLATE "C",
	f2 text NOT NULL,
	PRIMARY KEY(f1)
) USING orioledb;
ALTER TABLE o_ddl_parted ATTACH PARTITION o_ddl_check_2 FOR VALUES FROM ('e') TO ('h');
-- Move row between partitions
UPDATE o_ddl_parted SET f1 = 'efg' WHERE f1 = 'bcd';
SELECT * FROM o_ddl_parted;
 f1  | f2  
-----+-----
 a   | b
 b   | ddd
 efg | def
(3 rows)

ALTER TABLE o_ddl_parted DETACH PARTITION o_ddl_check;
ALTER TABLE o_ddl_parted DETACH PARTITION o_ddl_check_2;
DROP TABLE o_ddl_parted;
DROP TABLE o_ddl_check;
DROP TABLE o_ddl_check_2;
CREATE TABLE o_ddl_check
(
	f1 int NOT NULL,
	f2 int,
	f3 int,
	f4 int,
	PRIMARY KEY(f1)
) USING orioledb;
CREATE UNIQUE INDEX o_ddl_check_unique ON o_test24 (f2, f3, f4);
ERROR:  relation "o_test24" does not exist
CREATE INDEX o_ddl_check_regular ON o_test24 (f2, f3, f4);
ERROR:  relation "o_test24" does not exist
INSERT INTO o_ddl_check VALUES (1, 2, NULL, 5);
INSERT INTO o_ddl_check VALUES (2, 2, NULL, 3);
INSERT INTO o_ddl_check VALUES (3, 2, NULL, 2);
INSERT INTO o_ddl_check VALUES (4, 1, NULL, 4);
INSERT INTO o_ddl_check VALUES (5, 2, NULL, 3);
INSERT INTO o_ddl_check VALUES (6, 2, NULL, NULL);
INSERT INTO o_ddl_check VALUES (7, 2, NULL, NULL);
SELECT * FROM o_ddl_check;
 f1 | f2 | f3 | f4 
----+----+----+----
  1 |  2 |    |  5
  2 |  2 |    |  3
  3 |  2 |    |  2
  4 |  1 |    |  4
  5 |  2 |    |  3
  6 |  2 |    |   
  7 |  2 |    |   
(7 rows)

SELECT orioledb_tbl_structure('o_ddl_check'::regclass, 'nue');
                       orioledb_tbl_structure                        
---------------------------------------------------------------------
 Index o_ddl_check_pkey contents                                    +
 Page 0: level = 0, maxKeyLen = 8, nVacatedBytes = 0                +
 state = free, datoid equal, relnode equal, ix_type = primary, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 272, tuple = ('1', '2', null, '5')            +
     Item 1: offset = 320, tuple = ('2', '2', null, '3')            +
     Item 2: offset = 368, tuple = ('3', '2', null, '2')            +
     Item 3: offset = 416, tuple = ('4', '1', null, '4')            +
     Item 4: offset = 464, tuple = ('5', '2', null, '3')            +
     Item 5: offset = 512, tuple = ('6', '2', null, null)           +
     Item 6: offset = 552, tuple = ('7', '2', null, null)           +
                                                                    +
 Index toast: not loaded                                            +
 
(1 row)

DROP TABLE o_ddl_check;
CREATE TABLE o_ddl_missing (
	i int4 NOT NULL
) USING orioledb;
INSERT INTO o_ddl_missing SELECT * FROM generate_series(1, 10);
ALTER TABLE o_ddl_missing ADD COLUMN l int4;
SELECT * FROM o_ddl_missing;
 i  | l 
----+---
  1 |  
  2 |  
  3 |  
  4 |  
  5 |  
  6 |  
  7 |  
  8 |  
  9 |  
 10 |  
(10 rows)

ALTER TABLE o_ddl_missing ADD COLUMN m int4 DEFAULT 2;
SELECT * FROM o_ddl_missing;
 i  | l | m 
----+---+---
  1 |   | 2
  2 |   | 2
  3 |   | 2
  4 |   | 2
  5 |   | 2
  6 |   | 2
  7 |   | 2
  8 |   | 2
  9 |   | 2
 10 |   | 2
(10 rows)

ALTER TABLE o_ddl_missing ADD COLUMN n int4, ADD COLUMN o int4[];
SELECT * FROM o_ddl_missing;
 i  | l | m | n | o 
----+---+---+---+---
  1 |   | 2 |   | 
  2 |   | 2 |   | 
  3 |   | 2 |   | 
  4 |   | 2 |   | 
  5 |   | 2 |   | 
  6 |   | 2 |   | 
  7 |   | 2 |   | 
  8 |   | 2 |   | 
  9 |   | 2 |   | 
 10 |   | 2 |   | 
(10 rows)

UPDATE o_ddl_missing SET l = 5, n = 6, o = '{1, 5, 2}' WHERE i BETWEEN 3 AND 7;
SELECT * FROM o_ddl_missing;
 i  | l | m | n |    o    
----+---+---+---+---------
  1 |   | 2 |   | 
  2 |   | 2 |   | 
  3 | 5 | 2 | 6 | {1,5,2}
  4 | 5 | 2 | 6 | {1,5,2}
  5 | 5 | 2 | 6 | {1,5,2}
  6 | 5 | 2 | 6 | {1,5,2}
  7 | 5 | 2 | 6 | {1,5,2}
  8 |   | 2 |   | 
  9 |   | 2 |   | 
 10 |   | 2 |   | 
(10 rows)

ALTER TABLE o_ddl_missing
	DROP COLUMN m,
	ADD COLUMN p int4[] DEFAULT '{2, 4, 8}',
	ADD COLUMN r int4[];
SELECT * FROM o_ddl_missing;
 i  | l | n |    o    |    p    | r 
----+---+---+---------+---------+---
  1 |   |   |         | {2,4,8} | 
  2 |   |   |         | {2,4,8} | 
  3 | 5 | 6 | {1,5,2} | {2,4,8} | 
  4 | 5 | 6 | {1,5,2} | {2,4,8} | 
  5 | 5 | 6 | {1,5,2} | {2,4,8} | 
  6 | 5 | 6 | {1,5,2} | {2,4,8} | 
  7 | 5 | 6 | {1,5,2} | {2,4,8} | 
  8 |   |   |         | {2,4,8} | 
  9 |   |   |         | {2,4,8} | 
 10 |   |   |         | {2,4,8} | 
(10 rows)

CREATE FUNCTION pseudo_random(seed bigint, i bigint) RETURNS float8 AS
$$
	SELECT substr(sha256(($1::text || ' ' || $2::text)::bytea)::text,2,16)::bit(52)::bigint::float8 / pow(2.0, 52.0);
$$ LANGUAGE sql;
CREATE SEQUENCE o_test_add_column_id_seq2;
CREATE TABLE o_test_add_column
(
	id serial primary key,
	i int4,
	v int4 default nextval('o_test_add_column_id_seq2'::regclass)
) USING orioledb;
\d o_test_add_column
                              Table "ddl.o_test_add_column"
 Column |  Type   | Collation | Nullable |                    Default                     
--------+---------+-----------+----------+------------------------------------------------
 id     | integer |           | not null | nextval('o_test_add_column_id_seq'::regclass)
 i      | integer |           |          | 
 v      | integer |           |          | nextval('o_test_add_column_id_seq2'::regclass)
Indexes:
    "o_test_add_column_pkey" PRIMARY KEY, btree (id)

SELECT orioledb_tbl_indices('o_test_add_column'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test_add_column_pkey                  +
     Index type: primary, unique               +
     Leaf tuple size: 3, non-leaf tuple size: 1+
     Non-leaf tuple fields: id                 +
 
(1 row)

SELECT orioledb_tbl_structure('o_test_add_column'::regclass, 'ne');
          orioledb_tbl_structure          
------------------------------------------
 Index o_test_add_column_pkey: not loaded+
 Index toast: not loaded                 +
 
(1 row)

INSERT INTO o_test_add_column VALUES (0, 15, NULL);
INSERT INTO o_test_add_column (i)
	SELECT pseudo_random(1, v) * 20000 FROM generate_series(1,10) v;
-- test new null column
ALTER TABLE o_test_add_column ADD COLUMN y int4;
\d o_test_add_column
                              Table "ddl.o_test_add_column"
 Column |  Type   | Collation | Nullable |                    Default                     
--------+---------+-----------+----------+------------------------------------------------
 id     | integer |           | not null | nextval('o_test_add_column_id_seq'::regclass)
 i      | integer |           |          | 
 v      | integer |           |          | nextval('o_test_add_column_id_seq2'::regclass)
 y      | integer |           |          | 
Indexes:
    "o_test_add_column_pkey" PRIMARY KEY, btree (id)

SELECT orioledb_tbl_indices('o_test_add_column'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test_add_column_pkey                  +
     Index type: primary, unique               +
     Leaf tuple size: 4, non-leaf tuple size: 1+
     Non-leaf tuple fields: id                 +
 
(1 row)

SELECT orioledb_tbl_structure('o_test_add_column'::regclass, 'ne');
                       orioledb_tbl_structure                        
---------------------------------------------------------------------
 Index o_test_add_column_pkey contents                              +
 Page 0: level = 0, maxKeyLen = 8, nVacatedBytes = 0                +
 state = free, datoid equal, relnode equal, ix_type = primary, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 280, tuple = ('0', '15', null, null)          +
     Item 1: offset = 320, tuple = ('1', '159', '1', null)          +
     Item 2: offset = 352, tuple = ('2', '19305', '2', null)        +
     Item 3: offset = 384, tuple = ('3', '7790', '3', null)         +
     Item 4: offset = 416, tuple = ('4', '16764', '4', null)        +
     Item 5: offset = 448, tuple = ('5', '8182', '5', null)         +
     Item 6: offset = 480, tuple = ('6', '3414', '6', null)         +
     Item 7: offset = 512, tuple = ('7', '16703', '7', null)        +
     Item 8: offset = 544, tuple = ('8', '18766', '8', null)        +
     Item 9: offset = 576, tuple = ('9', '18518', '9', null)        +
     Item 10: offset = 608, tuple = ('10', '18915', '10', null)     +
                                                                    +
 Index toast: not loaded                                            +
 
(1 row)

-- test new column with volatile default
ALTER TABLE o_test_add_column ADD COLUMN z int4 default 5;
\d o_test_add_column
                              Table "ddl.o_test_add_column"
 Column |  Type   | Collation | Nullable |                    Default                     
--------+---------+-----------+----------+------------------------------------------------
 id     | integer |           | not null | nextval('o_test_add_column_id_seq'::regclass)
 i      | integer |           |          | 
 v      | integer |           |          | nextval('o_test_add_column_id_seq2'::regclass)
 y      | integer |           |          | 
 z      | integer |           |          | 5
Indexes:
    "o_test_add_column_pkey" PRIMARY KEY, btree (id)

SELECT orioledb_tbl_indices('o_test_add_column'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test_add_column_pkey                  +
     Index type: primary, unique               +
     Leaf tuple size: 5, non-leaf tuple size: 1+
     Non-leaf tuple fields: id                 +
 
(1 row)

SELECT orioledb_tbl_structure('o_test_add_column'::regclass, 'ne');
                        orioledb_tbl_structure                        
----------------------------------------------------------------------
 Index o_test_add_column_pkey contents                               +
 Page 0: level = 0, maxKeyLen = 8, nVacatedBytes = 0                 +
 state = free, datoid equal, relnode equal, ix_type = primary, dirty +
     Leftmost, Rightmost                                             +
   Chunk 0: offset = 0, location = 256, hikey location = 64          +
     Item 0: offset = 280, tuple = ('0', '15', null, null, null)     +
     Item 1: offset = 320, tuple = ('1', '159', '1', null, null)     +
     Item 2: offset = 352, tuple = ('2', '19305', '2', null, null)   +
     Item 3: offset = 384, tuple = ('3', '7790', '3', null, null)    +
     Item 4: offset = 416, tuple = ('4', '16764', '4', null, null)   +
     Item 5: offset = 448, tuple = ('5', '8182', '5', null, null)    +
     Item 6: offset = 480, tuple = ('6', '3414', '6', null, null)    +
     Item 7: offset = 512, tuple = ('7', '16703', '7', null, null)   +
     Item 8: offset = 544, tuple = ('8', '18766', '8', null, null)   +
     Item 9: offset = 576, tuple = ('9', '18518', '9', null, null)   +
     Item 10: offset = 608, tuple = ('10', '18915', '10', null, null)+
                                                                     +
 Index toast: not loaded                                             +
 
(1 row)

CREATE SEQUENCE o_test_j_seq;
-- test new column with non-volatile default
ALTER TABLE o_test_add_column
	ADD COLUMN j int4 not null default pseudo_random(2, nextval('o_test_j_seq')) * 20000;
\d o_test_add_column
                                                   Table "ddl.o_test_add_column"
 Column |  Type   | Collation | Nullable |                                         Default                                         
--------+---------+-----------+----------+-----------------------------------------------------------------------------------------
 id     | integer |           | not null | nextval('o_test_add_column_id_seq'::regclass)
 i      | integer |           |          | 
 v      | integer |           |          | nextval('o_test_add_column_id_seq2'::regclass)
 y      | integer |           |          | 
 z      | integer |           |          | 5
 j      | integer |           | not null | (pseudo_random(2::bigint, nextval('o_test_j_seq'::regclass)) * 20000::double precision)
Indexes:
    "o_test_add_column_pkey" PRIMARY KEY, btree (id)

SELECT orioledb_tbl_indices('o_test_add_column'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test_add_column_pkey                  +
     Index type: primary, unique               +
     Leaf tuple size: 6, non-leaf tuple size: 1+
     Non-leaf tuple fields: id                 +
 
(1 row)

SELECT orioledb_tbl_structure('o_test_add_column'::regclass, 'ne');
                           orioledb_tbl_structure                            
-----------------------------------------------------------------------------
 Index o_test_add_column_pkey contents                                      +
 Page 0: level = 0, maxKeyLen = 8, nVacatedBytes = 0                        +
 state = free, datoid equal, relnode equal, ix_type = primary, dirty        +
     Leftmost, Rightmost                                                    +
   Chunk 0: offset = 0, location = 256, hikey location = 64                 +
     Item 0: offset = 280, tuple = ('0', '15', null, null, '5', '17928')    +
     Item 1: offset = 328, tuple = ('1', '159', '1', null, '5', '332')      +
     Item 2: offset = 384, tuple = ('2', '19305', '2', null, '5', '9675')   +
     Item 3: offset = 440, tuple = ('3', '7790', '3', null, '5', '17247')   +
     Item 4: offset = 496, tuple = ('4', '16764', '4', null, '5', '5534')   +
     Item 5: offset = 552, tuple = ('5', '8182', '5', null, '5', '515')     +
     Item 6: offset = 608, tuple = ('6', '3414', '6', null, '5', '9615')    +
     Item 7: offset = 664, tuple = ('7', '16703', '7', null, '5', '12229')  +
     Item 8: offset = 720, tuple = ('8', '18766', '8', null, '5', '16597')  +
     Item 9: offset = 776, tuple = ('9', '18518', '9', null, '5', '9993')   +
     Item 10: offset = 832, tuple = ('10', '18915', '10', null, '5', '5149')+
                                                                            +
 Index toast: not loaded                                                    +
 
(1 row)

INSERT INTO o_test_add_column (i)
	SELECT pseudo_random(3, v) * 20000 FROM generate_series(1,5) v;
SELECT orioledb_tbl_structure('o_test_add_column'::regclass, 'ne');
                            orioledb_tbl_structure                             
-------------------------------------------------------------------------------
 Index o_test_add_column_pkey contents                                        +
 Page 0: level = 0, maxKeyLen = 8, nVacatedBytes = 0                          +
 state = free, datoid equal, relnode equal, ix_type = primary, dirty          +
     Leftmost, Rightmost                                                      +
   Chunk 0: offset = 0, location = 256, hikey location = 64, hikey = ('6')    +
     Item 0: offset = 272, tuple = ('0', '15', null, null, '5', '17928')      +
     Item 1: offset = 320, tuple = ('1', '159', '1', null, '5', '332')        +
     Item 2: offset = 376, tuple = ('2', '19305', '2', null, '5', '9675')     +
     Item 3: offset = 432, tuple = ('3', '7790', '3', null, '5', '17247')     +
     Item 4: offset = 488, tuple = ('4', '16764', '4', null, '5', '5534')     +
     Item 5: offset = 544, tuple = ('5', '8182', '5', null, '5', '515')       +
   Chunk 1: offset = 6, location = 600, hikey location = 72                   +
     Item 6: offset = 624, tuple = ('6', '3414', '6', null, '5', '9615')      +
     Item 7: offset = 680, tuple = ('7', '16703', '7', null, '5', '12229')    +
     Item 8: offset = 736, tuple = ('8', '18766', '8', null, '5', '16597')    +
     Item 9: offset = 792, tuple = ('9', '18518', '9', null, '5', '9993')     +
     Item 10: offset = 848, tuple = ('10', '18915', '10', null, '5', '5149')  +
     Item 11: offset = 904, tuple = ('11', '3206', '11', null, '5', '9798')   +
     Item 12: offset = 960, tuple = ('12', '15492', '12', null, '5', '17916') +
     Item 13: offset = 1016, tuple = ('13', '16020', '13', null, '5', '19971')+
     Item 14: offset = 1072, tuple = ('14', '9948', '14', null, '5', '1747')  +
     Item 15: offset = 1128, tuple = ('15', '4451', '15', null, '5', '17054') +
                                                                              +
 Index toast: not loaded                                                      +
 
(1 row)

EXPLAIN (COSTS OFF) SELECT * FROM o_test_add_column;
          QUERY PLAN           
-------------------------------
 Seq Scan on o_test_add_column
(1 row)

SELECT * FROM o_test_add_column;
 id |   i   | v  | y | z |   j   
----+-------+----+---+---+-------
  0 |    15 |    |   | 5 | 17928
  1 |   159 |  1 |   | 5 |   332
  2 | 19305 |  2 |   | 5 |  9675
  3 |  7790 |  3 |   | 5 | 17247
  4 | 16764 |  4 |   | 5 |  5534
  5 |  8182 |  5 |   | 5 |   515
  6 |  3414 |  6 |   | 5 |  9615
  7 | 16703 |  7 |   | 5 | 12229
  8 | 18766 |  8 |   | 5 | 16597
  9 | 18518 |  9 |   | 5 |  9993
 10 | 18915 | 10 |   | 5 |  5149
 11 |  3206 | 11 |   | 5 |  9798
 12 | 15492 | 12 |   | 5 | 17916
 13 | 16020 | 13 |   | 5 | 19971
 14 |  9948 | 14 |   | 5 |  1747
 15 |  4451 | 15 |   | 5 | 17054
(16 rows)

-- Test that default fields not recalculated
SELECT * FROM o_test_add_column;
 id |   i   | v  | y | z |   j   
----+-------+----+---+---+-------
  0 |    15 |    |   | 5 | 17928
  1 |   159 |  1 |   | 5 |   332
  2 | 19305 |  2 |   | 5 |  9675
  3 |  7790 |  3 |   | 5 | 17247
  4 | 16764 |  4 |   | 5 |  5534
  5 |  8182 |  5 |   | 5 |   515
  6 |  3414 |  6 |   | 5 |  9615
  7 | 16703 |  7 |   | 5 | 12229
  8 | 18766 |  8 |   | 5 | 16597
  9 | 18518 |  9 |   | 5 |  9993
 10 | 18915 | 10 |   | 5 |  5149
 11 |  3206 | 11 |   | 5 |  9798
 12 | 15492 | 12 |   | 5 | 17916
 13 | 16020 | 13 |   | 5 | 19971
 14 |  9948 | 14 |   | 5 |  1747
 15 |  4451 | 15 |   | 5 | 17054
(16 rows)

-- Test primary key usage after rewrite
BEGIN;
SET LOCAL enable_seqscan = off;
EXPLAIN (COSTS OFF) SELECT * FROM o_test_add_column ORDER BY id;
                   QUERY PLAN                    
-------------------------------------------------
 Custom Scan (o_scan) on o_test_add_column
   Forward index scan of: o_test_add_column_pkey
(2 rows)

SELECT * FROM o_test_add_column ORDER BY id;
 id |   i   | v  | y | z |   j   
----+-------+----+---+---+-------
  0 |    15 |    |   | 5 | 17928
  1 |   159 |  1 |   | 5 |   332
  2 | 19305 |  2 |   | 5 |  9675
  3 |  7790 |  3 |   | 5 | 17247
  4 | 16764 |  4 |   | 5 |  5534
  5 |  8182 |  5 |   | 5 |   515
  6 |  3414 |  6 |   | 5 |  9615
  7 | 16703 |  7 |   | 5 | 12229
  8 | 18766 |  8 |   | 5 | 16597
  9 | 18518 |  9 |   | 5 |  9993
 10 | 18915 | 10 |   | 5 |  5149
 11 |  3206 | 11 |   | 5 |  9798
 12 | 15492 | 12 |   | 5 | 17916
 13 | 16020 | 13 |   | 5 | 19971
 14 |  9948 | 14 |   | 5 |  1747
 15 |  4451 | 15 |   | 5 | 17054
(16 rows)

COMMIT;
CREATE TABLE o_test_multiple_analyzes (
    aid integer NOT NULL PRIMARY KEY
) USING orioledb;
-- Wrapper function, which converts result of SQL query to the text
CREATE OR REPLACE FUNCTION query_to_text(sql TEXT) RETURNS SETOF TEXT AS $$
	BEGIN
		RETURN QUERY EXECUTE sql;
	END $$
LANGUAGE plpgsql;
INSERT INTO o_test_multiple_analyzes
	SELECT aid FROM generate_series(1, 10) aid;
BEGIN;
select count(1) from o_test_multiple_analyzes;
 count 
-------
    10
(1 row)

SELECT regexp_replace(t, '[\d\.]+', 'x', 'g')
FROM query_to_text('explain (analyze, buffers)
	select * from o_test_multiple_analyzes ORDER BY aid DESC LIMIT 10;') as t;
                                                 regexp_replace                                                 
----------------------------------------------------------------------------------------------------------------
 Limit  (cost=x rows=x width=x) (actual time=x rows=x loops=x)
   ->  Custom Scan (o_scan) on o_test_multiple_analyzes  (cost=x rows=x width=x) (actual time=x rows=x loops=x)
         Backward index only scan of: o_test_multiple_analyzes_pkey
         Primary pages: read=x
 Planning:
   Buffers: shared hit=x
 Planning Time: x ms
 Execution Time: x ms
(8 rows)

SELECT regexp_replace(t, '[\d\.]+', 'x', 'g')
FROM query_to_text('explain (analyze, buffers)
	select count(1) from o_test_multiple_analyzes;') as t;
                                           regexp_replace                                           
----------------------------------------------------------------------------------------------------
 Aggregate  (cost=x rows=x width=x) (actual time=x rows=x loops=x)
   ->  Seq Scan on o_test_multiple_analyzes  (cost=x rows=x width=x) (actual time=x rows=x loops=x)
 Planning Time: x ms
 Execution Time: x ms
(4 rows)

ROLLBACK;
CREATE FOREIGN DATA WRAPPER dummy;
CREATE SERVER s0 FOREIGN DATA WRAPPER dummy;
CREATE FOREIGN TABLE ft1 (
	c1 integer OPTIONS ("param 1" 'val1') NOT NULL,
	c2 text OPTIONS (param2 'val2', param3 'val3') CHECK (c2 <> ''),
	c3 date,
	CHECK (c3 BETWEEN '1994-01-01'::date AND '1994-01-31'::date)
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value');
DROP FOREIGN DATA WRAPPER dummy CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to server s0
drop cascades to foreign table ft1
CREATE TABLE o_unexisting_column
(
	key int4,
	PRIMARY KEY(key)
) USING orioledb;
ALTER TABLE o_unexisting_column ALTER COLUMN key_2 SET DEFAULT 5;
ERROR:  column "key_2" of relation "o_unexisting_column" does not exist
ALTER TABLE o_unexisting_column ALTER COLUMN key_2 DROP DEFAULT;
ERROR:  column "key_2" of relation "o_unexisting_column" does not exist
ALTER TABLE o_unexisting_column RENAME COLUMN key_2 TO key_3;
ERROR:  column "key_2" does not exist
ALTER TABLE o_unexisting_column DROP COLUMN key_2;
ERROR:  column "key_2" of relation "o_unexisting_column" does not exist
ALTER TABLE o_unexisting_column ALTER COLUMN key_2 SET NOT NULL;
ERROR:  column "key_2" of relation "o_unexisting_column" does not exist
ALTER TABLE o_unexisting_column ALTER COLUMN key_2 DROP NOT NULL;
ERROR:  column "key_2" of relation "o_unexisting_column" does not exist
ALTER TABLE o_unexisting_column ALTER key_2 TYPE int;
ERROR:  column "key_2" of relation "o_unexisting_column" does not exist
ALTER TABLE o_unexisting_column ALTER key_2 TYPE int USING key_2::integer;
ERROR:  column "key_2" does not exist
LINE 1: ...LE o_unexisting_column ALTER key_2 TYPE int USING key_2::int...
                                                             ^
HINT:  Perhaps you meant to reference the column "o_unexisting_column.key".
ALTER TABLE o_unexisting_column ALTER COLUMN key_2
	ADD GENERATED ALWAYS AS IDENTITY;
ERROR:  column "key_2" of relation "o_unexisting_column" does not exist
ALTER TABLE o_unexisting_column ALTER COLUMN key
	ADD GENERATED ALWAYS AS IDENTITY;
UPDATE o_unexisting_column SET key_2 = 4 WHERE key = 2;
ERROR:  column "key_2" of relation "o_unexisting_column" does not exist
LINE 1: UPDATE o_unexisting_column SET key_2 = 4 WHERE key = 2;
                                       ^
CREATE TABLE o_test_unique_on_conflict (
	key int
) USING orioledb;
CREATE UNIQUE INDEX ON o_test_unique_on_conflict(key);
INSERT INTO o_test_unique_on_conflict(key)
	(SELECT key FROM generate_series (1, 1) key);
INSERT INTO o_test_unique_on_conflict (key)
	SELECT * FROM generate_series(1, 1)
	ON CONFLICT (key) DO UPDATE
		SET key = o_test_unique_on_conflict.key + 100;
SELECT * FROM o_test_unique_on_conflict;
 key 
-----
 101
(1 row)

CREATE TABLE o_test_update_set_renamed_column(
	val_1 int PRIMARY KEY,
	val_2 int
) USING orioledb;
INSERT INTO o_test_update_set_renamed_column(val_1, val_2)
	(SELECT val_1, val_1 FROM generate_series (1, 1) val_1);
SELECT * FROM o_test_update_set_renamed_column;
 val_1 | val_2 
-------+-------
     1 |     1
(1 row)

ALTER TABLE o_test_update_set_renamed_column RENAME COLUMN val_2 to val_3;
UPDATE o_test_update_set_renamed_column SET val_3 = 5;
SELECT * FROM o_test_update_set_renamed_column;
 val_1 | val_3 
-------+-------
     1 |     5
(1 row)

CREATE TABLE o_test_inherits_1 (
  val_1 int PRIMARY KEY
) USING orioledb;
CREATE TABLE o_test_inherits_2 (
	val_2 int
) INHERITS (o_test_inherits_1) USING orioledb;
BEGIN;
CREATE TABLE o_test(
	id integer NOT NULL,
	val text NOT NULL,
	PRIMARY KEY(id),
	UNIQUE(id, val)
) USING orioledb;
CREATE TABLE o_test_child(
	id integer NOT NULL,
	o_test_ID integer NOT NULL REFERENCES o_test (id),
	PRIMARY KEY(id)
) USING orioledb;
INSERT INTO o_test(id, val) VALUES (1, 'hello');
INSERT INTO o_test(id, val) VALUES (2, 'hey');
DELETE FROM o_test where id = 1;
COMMIT;
CREATE TABLE o_test_opcoptions_reset (
	val_1 int NOT NULL,
	val_3 text DEFAULT 'abc'
) USING orioledb;
INSERT INTO o_test_opcoptions_reset (val_1) VALUES (1);
BEGIN;
CREATE INDEX o_test_opcoptions_reset_idx1 ON o_test_opcoptions_reset (val_3);
EXPLAIN (COSTS OFF) SELECT * FROM o_test_opcoptions_reset;
             QUERY PLAN              
-------------------------------------
 Seq Scan on o_test_opcoptions_reset
(1 row)

SELECT * FROM o_test_opcoptions_reset;
 val_1 | val_3 
-------+-------
     1 | abc
(1 row)

ALTER TABLE o_test_opcoptions_reset ADD PRIMARY KEY (val_1);
EXPLAIN (COSTS OFF) SELECT * FROM o_test_opcoptions_reset;
             QUERY PLAN              
-------------------------------------
 Seq Scan on o_test_opcoptions_reset
(1 row)

SELECT * FROM o_test_opcoptions_reset;
 val_1 | val_3 
-------+-------
     1 | abc
(1 row)

COMMIT;
CREATE TABLE o_test_null_hasdef (
	val_1	int DEFAULT 1,
	val_2	text,
	val_3	text DEFAULT 'a'
) USING orioledb;
INSERT INTO o_test_null_hasdef VALUES (3);
INSERT INTO o_test_null_hasdef VALUES (4, NULL);
INSERT INTO o_test_null_hasdef VALUES (5, 'b', NULL);
INSERT INTO o_test_null_hasdef VALUES (6, NULL, NULL);
SELECT orioledb_tbl_structure('o_test_null_hasdef'::regclass, 'nue');
                       orioledb_tbl_structure                        
---------------------------------------------------------------------
 Index ctid_primary contents                                        +
 Page 0: level = 0, maxKeyLen = 8, nVacatedBytes = 0                +
 state = free, datoid equal, relnode equal, ix_type = primary, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 264, tuple = ('(0,1)', '3', null, 'a')        +
     Item 1: offset = 312, tuple = ('(0,2)', '4', null, 'a')        +
     Item 2: offset = 360, tuple = ('(0,3)', '5', 'b', null)        +
     Item 3: offset = 408, tuple = ('(0,4)', '6', null, null)       +
                                                                    +
 Index toast: not loaded                                            +
 
(1 row)

SELECT * FROM o_test_null_hasdef;
 val_1 | val_2 | val_3 
-------+-------+-------
     3 |       | a
     4 |       | a
     5 | b     | 
     6 |       | 
(4 rows)

CREATE VIEW test_view_1 AS SELECT * FROM o_test_null_hasdef;
CREATE rule test_view_1 AS
	ON INSERT TO test_view_1
	  DO INSTEAD INSERT INTO o_test_null_hasdef SELECT new.*;
INSERT INTO test_view_1 VALUES (7);
SELECT orioledb_tbl_structure('o_test_null_hasdef'::regclass, 'nue');
                       orioledb_tbl_structure                        
---------------------------------------------------------------------
 Index ctid_primary contents                                        +
 Page 0: level = 0, maxKeyLen = 8, nVacatedBytes = 0                +
 state = free, datoid equal, relnode equal, ix_type = primary, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 272, tuple = ('(0,1)', '3', null, 'a')        +
     Item 1: offset = 320, tuple = ('(0,2)', '4', null, 'a')        +
     Item 2: offset = 368, tuple = ('(0,3)', '5', 'b', null)        +
     Item 3: offset = 416, tuple = ('(0,4)', '6', null, null)       +
     Item 4: offset = 464, tuple = ('(0,5)', '7', null, null)       +
                                                                    +
 Index toast: not loaded                                            +
 
(1 row)

SELECT * FROM test_view_1;
 val_1 | val_2 | val_3 
-------+-------+-------
     3 |       | a
     4 |       | a
     5 | b     | 
     6 |       | 
     7 |       | 
(5 rows)

SELECT * FROM o_test_null_hasdef;
 val_1 | val_2 | val_3 
-------+-------+-------
     3 |       | a
     4 |       | a
     5 | b     | 
     6 |       | 
     7 |       | 
(5 rows)

CREATE TABLE o_test_float_default (
  val_1 int DEFAULT 1,
  val_2 text DEFAULT 'a',
  val_3 float8 DEFAULT 1.1
)USING orioledb;
INSERT INTO o_test_float_default VALUES (2, null, 2.0);
SELECT * FROM o_test_float_default;
 val_1 | val_2 | val_3 
-------+-------+-------
     2 |       |     2
(1 row)

CREATE TABLE o_test_duplicate_key_fields (
	val_2 int,
	val_1 int
) USING orioledb;
CREATE INDEX o_test_duplicate_key_fields_ix1
	ON o_test_duplicate_key_fields (val_1, val_2, val_1) INCLUDE (val_1);
INSERT INTO o_test_duplicate_key_fields SELECT v, v * 10 FROM generate_series(1, 5) v;
SELECT orioledb_tbl_indices('o_test_duplicate_key_fields'::regclass);
                 orioledb_tbl_indices                 
------------------------------------------------------
 Index ctid_primary                                  +
     Index type: primary, unique, ctid               +
     Leaf tuple size: 3, non-leaf tuple size: 1      +
     Non-leaf tuple fields: ctid                     +
 Index o_test_duplicate_key_fields_ix1               +
     Index type: secondary                           +
     Leaf tuple size: 4, non-leaf tuple size: 4      +
     Non-leaf tuple fields: val_1, val_2, val_1, ctid+
     Leaf tuple fields: val_1, val_2, val_1, ctid    +
 
(1 row)

SELECT orioledb_tbl_structure('o_test_duplicate_key_fields'::regclass, 'nue');
                       orioledb_tbl_structure                        
---------------------------------------------------------------------
 Index ctid_primary contents                                        +
 Page 0: level = 0, maxKeyLen = 8, nVacatedBytes = 0                +
 state = free, datoid equal, relnode equal, ix_type = primary, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 272, tuple = ('(0,1)', '1', '10')             +
     Item 1: offset = 304, tuple = ('(0,2)', '2', '20')             +
     Item 2: offset = 336, tuple = ('(0,3)', '3', '30')             +
     Item 3: offset = 368, tuple = ('(0,4)', '4', '40')             +
     Item 4: offset = 400, tuple = ('(0,5)', '5', '50')             +
                                                                    +
 Index o_test_duplicate_key_fields_ix1 contents                     +
 Page 0: level = 0, maxKeyLen = 24, nVacatedBytes = 0               +
 state = free, datoid equal, relnode equal, ix_type = regular, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 272, tuple = ('10', '1', '10', '(0,1)')       +
     Item 1: offset = 312, tuple = ('20', '2', '20', '(0,2)')       +
     Item 2: offset = 352, tuple = ('30', '3', '30', '(0,3)')       +
     Item 3: offset = 392, tuple = ('40', '4', '40', '(0,4)')       +
     Item 4: offset = 432, tuple = ('50', '5', '50', '(0,5)')       +
                                                                    +
 Index toast: not loaded                                            +
 
(1 row)

SET enable_seqscan = off;
EXPLAIN (COSTS OFF) SELECT val_1 FROM o_test_duplicate_key_fields ORDER BY val_1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Index Only Scan using o_test_duplicate_key_fields_ix1 on o_test_duplicate_key_fields
(1 row)

SELECT val_1 FROM o_test_duplicate_key_fields ORDER BY val_1;
 val_1 
-------
    10
    20
    30
    40
    50
(5 rows)

RESET enable_seqscan;
CREATE TABLE o_test_pkey_fields_same_as_index (
	val_1 int,
	val_2 int,
	val_3 int,
	UNIQUE (val_1, val_3)
) USING orioledb;
SELECT orioledb_tbl_indices('o_test_pkey_fields_same_as_index'::regclass);
                  orioledb_tbl_indices                  
--------------------------------------------------------
 Index ctid_primary                                    +
     Index type: primary, unique, ctid                 +
     Leaf tuple size: 4, non-leaf tuple size: 1        +
     Non-leaf tuple fields: ctid                       +
 Index o_test_pkey_fields_same_as_index_val_1_val_3_key+
     Index type: secondary, unique                     +
     Leaf tuple size: 3, non-leaf tuple size: 3        +
     Non-leaf tuple fields: val_1, val_3, ctid         +
     Leaf tuple fields: val_1, val_3, ctid             +
 
(1 row)

SET enable_seqscan = off;
INSERT INTO o_test_pkey_fields_same_as_index
	SELECT 1 * 10 ^ v, 2 * 10 ^ v, 3 * 10 ^ v FROM generate_series(0, 2) v;
EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_pkey_fields_same_as_index ORDER BY val_1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Index Scan using o_test_pkey_fields_same_as_index_val_1_val_3_key on o_test_pkey_fields_same_as_index
(1 row)

SELECT * FROM o_test_pkey_fields_same_as_index ORDER BY val_1;;
 val_1 | val_2 | val_3 
-------+-------+-------
     1 |     2 |     3
    10 |    20 |    30
   100 |   200 |   300
(3 rows)

ALTER TABLE o_test_pkey_fields_same_as_index ADD PRIMARY KEY (val_1, val_3);
SELECT orioledb_tbl_indices('o_test_pkey_fields_same_as_index'::regclass);
                  orioledb_tbl_indices                  
--------------------------------------------------------
 Index o_test_pkey_fields_same_as_index_pkey           +
     Index type: primary, unique                       +
     Leaf tuple size: 3, non-leaf tuple size: 2        +
     Non-leaf tuple fields: val_1, val_3               +
 Index o_test_pkey_fields_same_as_index_val_1_val_3_key+
     Index type: secondary, unique                     +
     Leaf tuple size: 2, non-leaf tuple size: 2        +
     Non-leaf tuple fields: val_1, val_3               +
     Leaf tuple fields: val_1, val_3                   +
 
(1 row)

EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_pkey_fields_same_as_index ORDER BY val_1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Custom Scan (o_scan) on o_test_pkey_fields_same_as_index
   Forward index scan of: o_test_pkey_fields_same_as_index_pkey
(2 rows)

SELECT * FROM o_test_pkey_fields_same_as_index ORDER BY val_1;
 val_1 | val_2 | val_3 
-------+-------+-------
     1 |     2 |     3
    10 |    20 |    30
   100 |   200 |   300
(3 rows)

ALTER TABLE o_test_pkey_fields_same_as_index
	DROP CONSTRAINT o_test_pkey_fields_same_as_index_pkey;
SELECT orioledb_tbl_indices('o_test_pkey_fields_same_as_index'::regclass);
                  orioledb_tbl_indices                  
--------------------------------------------------------
 Index ctid_primary                                    +
     Index type: primary, unique, ctid                 +
     Leaf tuple size: 4, non-leaf tuple size: 1        +
     Non-leaf tuple fields: ctid                       +
 Index o_test_pkey_fields_same_as_index_val_1_val_3_key+
     Index type: secondary, unique                     +
     Leaf tuple size: 3, non-leaf tuple size: 3        +
     Non-leaf tuple fields: val_1, val_3, ctid         +
     Leaf tuple fields: val_1, val_3, ctid             +
 
(1 row)

EXPLAIN (COSTS OFF)
	SELECT * FROM o_test_pkey_fields_same_as_index ORDER BY val_1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Index Scan using o_test_pkey_fields_same_as_index_val_1_val_3_key on o_test_pkey_fields_same_as_index
(1 row)

SELECT * FROM o_test_pkey_fields_same_as_index ORDER BY val_1;
 val_1 | val_2 | val_3 
-------+-------+-------
     1 |     2 |     3
    10 |    20 |    30
   100 |   200 |   300
(3 rows)

RESET enable_seqscan;
CREATE TABLE o_test_null_pkey_field (
	val_1 text,
	val_2 text,
	val_3 text
) USING orioledb;
ALTER TABLE o_test_null_pkey_field ADD COLUMN val_10 text;
INSERT INTO o_test_null_pkey_field
	SELECT 1 * 10 ^ v, 2 * 10 ^ v, 3 * 10 ^ v
		FROM generate_series(0, 2) v;
ALTER TABLE o_test_null_pkey_field ADD PRIMARY KEY (val_1, val_3, val_10);
ERROR:  column "val_10" of relation "o_test_null_pkey_field" contains null values
SELECT orioledb_tbl_indices('o_test_null_pkey_field'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index ctid_primary                            +
     Index type: primary, unique, ctid         +
     Leaf tuple size: 5, non-leaf tuple size: 1+
     Non-leaf tuple fields: ctid               +
 
(1 row)

SELECT orioledb_tbl_structure('o_test_null_pkey_field'::regclass, 'nue');
                         orioledb_tbl_structure                         
------------------------------------------------------------------------
 Index ctid_primary contents                                           +
 Page 0: level = 0, maxKeyLen = 8, nVacatedBytes = 0                   +
 state = free, datoid equal, relnode equal, ix_type = primary, dirty   +
     Leftmost, Rightmost                                               +
   Chunk 0: offset = 0, location = 256, hikey location = 64            +
     Item 0: offset = 264, tuple = ('(0,1)', '1', '2', '3', null)      +
     Item 1: offset = 312, tuple = ('(0,2)', '10', '20', '30', null)   +
     Item 2: offset = 360, tuple = ('(0,3)', '100', '200', '300', null)+
                                                                       +
 Index toast: not loaded                                               +
 
(1 row)

SELECT * FROM o_test_null_pkey_field;
 val_1 | val_2 | val_3 | val_10 
-------+-------+-------+--------
 1     | 2     | 3     | 
 10    | 20    | 30    | 
 100   | 200   | 300   | 
(3 rows)

CREATE TABLE o_test_included_ix_name (
	a int,
	b int,
	c int,
	d int
) USING orioledb;
ALTER TABLE o_test_included_ix_name ADD PRIMARY KEY (d);
\d o_test_included_ix_name
        Table "ddl.o_test_included_ix_name"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 
 b      | integer |           |          | 
 c      | integer |           |          | 
 d      | integer |           | not null | 
Indexes:
    "o_test_included_ix_name_pkey" PRIMARY KEY, btree (d)

CREATE INDEX ON o_test_included_ix_name (a, b) INCLUDE (a, c);
\d o_test_included_ix_name
        Table "ddl.o_test_included_ix_name"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 
 b      | integer |           |          | 
 c      | integer |           |          | 
 d      | integer |           | not null | 
Indexes:
    "o_test_included_ix_name_pkey" PRIMARY KEY, btree (d)
    "o_test_included_ix_name_a_b_a1_c_idx" btree (a, b) INCLUDE (a, c)

CREATE TABLE o_test_add_pkey_empty_index (
	a int,
	b int,
	c int,
	d int8
) USING orioledb;
CREATE INDEX ON o_test_add_pkey_empty_index (a, b);
\d o_test_add_pkey_empty_index
      Table "ddl.o_test_add_pkey_empty_index"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 
 b      | integer |           |          | 
 c      | integer |           |          | 
 d      | bigint  |           |          | 
Indexes:
    "o_test_add_pkey_empty_index_a_b_idx" btree (a, b)

SELECT orioledb_tbl_indices('o_test_add_pkey_empty_index'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index ctid_primary                            +
     Index type: primary, unique, ctid         +
     Leaf tuple size: 5, non-leaf tuple size: 1+
     Non-leaf tuple fields: ctid               +
 Index o_test_add_pkey_empty_index_a_b_idx     +
     Index type: secondary                     +
     Leaf tuple size: 3, non-leaf tuple size: 3+
     Non-leaf tuple fields: a, b, ctid         +
     Leaf tuple fields: a, b, ctid             +
 
(1 row)

ALTER TABLE o_test_add_pkey_empty_index ADD PRIMARY KEY (d);
\d o_test_add_pkey_empty_index
      Table "ddl.o_test_add_pkey_empty_index"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 
 b      | integer |           |          | 
 c      | integer |           |          | 
 d      | bigint  |           | not null | 
Indexes:
    "o_test_add_pkey_empty_index_pkey" PRIMARY KEY, btree (d)
    "o_test_add_pkey_empty_index_a_b_idx" btree (a, b)

SELECT orioledb_tbl_indices('o_test_add_pkey_empty_index'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test_add_pkey_empty_index_pkey        +
     Index type: primary, unique               +
     Leaf tuple size: 4, non-leaf tuple size: 1+
     Non-leaf tuple fields: d                  +
 Index o_test_add_pkey_empty_index_a_b_idx     +
     Index type: secondary                     +
     Leaf tuple size: 3, non-leaf tuple size: 3+
     Non-leaf tuple fields: a, b, d            +
     Leaf tuple fields: a, b, d                +
 
(1 row)

INSERT INTO o_test_add_pkey_empty_index
	SELECT v, v*10, v*100, v*1000 FROM generate_series(1, 5) v;
EXPLAIN (COSTS OFF) SELECT a, b, d FROM o_test_add_pkey_empty_index ORDER BY a;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Index Only Scan using o_test_add_pkey_empty_index_a_b_idx on o_test_add_pkey_empty_index
(1 row)

SELECT a, b, d FROM o_test_add_pkey_empty_index ORDER BY a;
 a | b  |  d   
---+----+------
 1 | 10 | 1000
 2 | 20 | 2000
 3 | 30 | 3000
 4 | 40 | 4000
 5 | 50 | 5000
(5 rows)

SELECT orioledb_tbl_structure('o_test_add_pkey_empty_index'::regclass, 'nue');
                       orioledb_tbl_structure                        
---------------------------------------------------------------------
 Index o_test_add_pkey_empty_index_pkey contents                    +
 Page 0: level = 0, maxKeyLen = 8, nVacatedBytes = 0                +
 state = free, datoid equal, relnode equal, ix_type = primary, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 272, tuple = ('1', '10', '100', '1000')       +
     Item 1: offset = 312, tuple = ('2', '20', '200', '2000')       +
     Item 2: offset = 352, tuple = ('3', '30', '300', '3000')       +
     Item 3: offset = 392, tuple = ('4', '40', '400', '4000')       +
     Item 4: offset = 432, tuple = ('5', '50', '500', '5000')       +
                                                                    +
 Index o_test_add_pkey_empty_index_a_b_idx contents                 +
 Page 0: level = 0, maxKeyLen = 16, nVacatedBytes = 0               +
 state = free, datoid equal, relnode equal, ix_type = regular, dirty+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
     Item 0: offset = 272, tuple = ('1', '10', '1000')              +
     Item 1: offset = 304, tuple = ('2', '20', '2000')              +
     Item 2: offset = 336, tuple = ('3', '30', '3000')              +
     Item 3: offset = 368, tuple = ('4', '40', '4000')              +
     Item 4: offset = 400, tuple = ('5', '50', '5000')              +
                                                                    +
 Index toast: not loaded                                            +
 
(1 row)

\d o_test_add_pkey_empty_index
      Table "ddl.o_test_add_pkey_empty_index"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 
 b      | integer |           |          | 
 c      | integer |           |          | 
 d      | bigint  |           | not null | 
Indexes:
    "o_test_add_pkey_empty_index_pkey" PRIMARY KEY, btree (d)
    "o_test_add_pkey_empty_index_a_b_idx" btree (a, b)

SELECT orioledb_tbl_indices('o_test_add_pkey_empty_index'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test_add_pkey_empty_index_pkey        +
     Index type: primary, unique               +
     Leaf tuple size: 4, non-leaf tuple size: 1+
     Non-leaf tuple fields: d                  +
 Index o_test_add_pkey_empty_index_a_b_idx     +
     Index type: secondary                     +
     Leaf tuple size: 3, non-leaf tuple size: 3+
     Non-leaf tuple fields: a, b, d            +
     Leaf tuple fields: a, b, d                +
 
(1 row)

CREATE TABLE o_test_empty() USING orioledb;
\d o_test_empty
            Table "ddl.o_test_empty"
 Column | Type | Collation | Nullable | Default 
--------+------+-----------+----------+---------

SELECT orioledb_table_description('o_test_empty'::regclass);
                orioledb_table_description                 
-----------------------------------------------------------
 Compress = -1, Primary compress = -1, TOAST compress = -1+
  Column | Type | Collation | Nullable | Droped           +
 
(1 row)

SELECT * FROM o_test_empty;
--
(0 rows)

SELECT orioledb_tbl_structure('o_test_empty'::regclass, 'nue');
                       orioledb_tbl_structure                        
---------------------------------------------------------------------
 Index ctid_primary contents                                        +
 Page 0: level = 0, maxKeyLen = 0, nVacatedBytes = 0                +
 state = free, datoid equal, relnode equal, ix_type = primary, clean+
     Leftmost, Rightmost                                            +
   Chunk 0: offset = 0, location = 256, hikey location = 64         +
                                                                    +
 Index toast: not loaded                                            +
 
(1 row)

TRUNCATE o_test_empty;
SELECT * FROM o_test_empty;
--
(0 rows)

CREATE FUNCTION o_test_plpgsql_default_func(a int)
RETURNS TEXT
AS $$
    BEGIN
		RETURN 'WOW' || a;
    END;
$$ LANGUAGE plpgsql;
CREATE TABLE o_test_plpgsql_default (
    val_1 int DEFAULT LENGTH(o_test_plpgsql_default_func(6))
) USING orioledb;
DROP EXTENSION orioledb CASCADE;
NOTICE:  drop cascades to 21 other objects
DETAIL:  drop cascades to table o_ddl_missing
drop cascades to table o_test_add_column
drop cascades to table o_test_multiple_analyzes
drop cascades to table o_unexisting_column
drop cascades to table o_test_unique_on_conflict
drop cascades to table o_test_update_set_renamed_column
drop cascades to table o_test_inherits_1
drop cascades to table o_test_inherits_2
drop cascades to table o_test
drop cascades to table o_test_child
drop cascades to table o_test_opcoptions_reset
drop cascades to table o_test_null_hasdef
drop cascades to view test_view_1
drop cascades to table o_test_float_default
drop cascades to table o_test_duplicate_key_fields
drop cascades to table o_test_pkey_fields_same_as_index
drop cascades to table o_test_null_pkey_field
drop cascades to table o_test_included_ix_name
drop cascades to table o_test_add_pkey_empty_index
drop cascades to table o_test_empty
drop cascades to table o_test_plpgsql_default
DROP SCHEMA ddl CASCADE;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to function pseudo_random(bigint,bigint)
drop cascades to sequence o_test_add_column_id_seq2
drop cascades to sequence o_test_j_seq
drop cascades to function query_to_text(text)
drop cascades to function o_test_plpgsql_default_func(integer)
RESET search_path;
