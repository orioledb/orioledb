#!/usr/bin/env python3

import os
import pathlib
import shutil
import sys

from inspect import cleandoc
from textwrap import dedent, indent
from test.pg_tests.utils import normalize_name, parse_isolation_schedule

expectedFailures = [
    "classroom-scheduling",
    "cluster-conflict",
    "detach-partition-concurrently-4",
    "drop-index-concurrently-1",
    "eval-plan-qual",
    "eval-plan-qual-trigger",
    "fk-partitioned-2",
    "horizons",
    "index-only-scan",
    "inherit-temp",
    "insert-conflict-do-nothing-2",
    "insert-conflict-specconflict",
    "intra-grant-inplace",
    "lock-committed-keyupdate",
    "lock-update-delete",
    "matview-write-skew",
    "merge-join",
    "merge-update",
    "multiple-cic",
    "multiple-row-versions",
    "partial-index",
    "partition-key-update-3",
    "predicate-gin",
    "predicate-gist",
    "predicate-hash",
    "predicate-lock-hot-tuple",
    "project-manager",
    "read-only-anomaly-2",
    "read-only-anomaly-3",
    "read-write-unique",
    "read-write-unique-2",
    "read-write-unique-3",
    "read-write-unique-4",
    "receipt-report",
    "referential-integrity",
    "reindex-concurrently",
    "reindex-concurrently-toast",
    "ri-trigger",
    "serializable-parallel",
    "simple-write-skew",
    "stats",
    "temporal-range-integrity",
    "total-cash",
    "two-ids",
    "update-conflict-out",
    "vacuum-no-cleanup-lock",
    "vacuum-skip-locked",
]

if not 'PG_SRC_PATH' in os.environ:
	print("PG_SRC_PATH env variable should be path to postgres sources",
	      file=sys.stderr)

script_path = os.path.dirname(os.path.realpath(__file__))
isolationdir = os.path.join(os.environ['PG_SRC_PATH'], 'src/test/isolation')
schedule = os.path.join(isolationdir, 'isolation_schedule')

tests = parse_isolation_schedule(schedule)

single_test_path = os.path.join(script_path, '_g_i_single_test.py')
with open(single_test_path, 'w') as f:
	f.write(
	    cleandoc(f"""
		# generated by test/pg_tests/isolation.py
		from ..t.base_test import BaseTest
		from .utils import pg_isolation_regress
		from unittest import expectedFailure

		class Run(BaseTest):
	"""))
	for test in tests:
		if test not in expectedFailures:
			decorator = ""
		else:
			decorator = "@expectedFailure"
		f.write(
		    indent(
		        dedent(f"""
			{decorator}
			def {normalize_name(test)}(self):
				node = self.node
				node.append_conf(default_table_access_method='orioledb')
				node.start()
				pg_isolation_regress(node, "{test}")

				node.stop()
		"""), "\t"))

from . import _g_i_single_test

# shortcuts for calling single tests like this "test.pg_tests.isolation.test_read_only_anomaly"
for test in tests:
	globals()[normalize_name(
	    test)] = lambda testname=test: _g_i_single_test.Run(
	        normalize_name(testname))

from ._g_i_single_test import Run
