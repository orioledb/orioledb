#!/usr/bin/env python3

import os
import pathlib
import shutil
import sys

from collections import defaultdict
from inspect import cleandoc
from textwrap import dedent, indent
from test.pg_tests.utils import normalize_name, parse_regress_schedule

# expectedFailures = ["create_am", "psql", "prepared_xacts"]
expectedFailures = ["create_index", "polygon"]

if not 'PG_SRC_PATH' in os.environ:
	print("PG_SRC_PATH env variable should be path to postgres sources",
	      file=sys.stderr)

script_path = os.path.dirname(os.path.realpath(__file__))
regressdir = os.path.join(os.environ['PG_SRC_PATH'], 'src/test/regress')
bindir = pathlib.Path(shutil.which("postgres")).parent.resolve()
schedule = os.path.join(regressdir, 'parallel_schedule')

groups, depends = parse_regress_schedule(schedule)

# Should we add this to src/test/regress/parallel_schedule as "depends on" comments?
extended_depends = {"copy2": ["create_type"], "stats": ["stats_ext"]}
new_depends = defaultdict(list)
for d in (
        depends,
        extended_depends):  # you can list as many input dicts as you want here
	for key, value in d.items():
		assert isinstance(value, list)
		new_depends[key].extend(value)
depends = dict(new_depends)

single_test_path = os.path.join(script_path, '_g_r_single_test.py')
with open(single_test_path, 'w') as f:
	f.write(
	    cleandoc(f"""
		# generated by test/pg_tests/regress.py
		class Hide:
			from .regress_base import SingleBase
		from unittest import expectedFailure

		class Run(Hide.SingleBase):
	"""))
	f.write(
	    indent(
	        dedent(f"""
			depends = {depends}
			expectedFailures = {expectedFailures}

	"""), "\t"))
	for idx, group in enumerate(groups):
		for test in group:
			if test not in expectedFailures:
				decorator = ""
			else:
				decorator = "@expectedFailure"
			fail_ok = test in expectedFailures
			f.write(
			    indent(
			        dedent(f"""
				{decorator}
				def {normalize_name(test)}(self):
					self.runTest("{test}")
			"""), "\t"))

groups_path = os.path.join(script_path, '_g_r_group_test.py')
with open(groups_path, 'w') as f:
	f.write(
	    cleandoc("""
		# generated by test/pg_tests/regress.py
		class Hide:
			from .regress_base import GroupBase
		from . import _g_r_single_test

	"""))
	# skip first group with only test_setup, because we always run it
	for idx, group in enumerate(groups[1:]):
		if "create_index" in group:
			group.remove("create_index")
		f.write(
		    dedent(f"""
		class Group{idx:02d}(Hide.GroupBase):
			tests = {group}
	"""))

from . import _g_r_single_test

# shortcuts for calling single tests like this "test.pg_tests.regress.test_create_am"
for idx, group in enumerate(groups):
	for test in group:
		globals()[normalize_name(
		    test)] = lambda testname=test: _g_r_single_test.Run(
		        normalize_name(testname))

from ._g_r_group_test import *
