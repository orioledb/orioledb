name: check

on:
  push:
  pull_request:

jobs:
  matrix:
    runs-on: blacksmith-2vcpu-ubuntu-2404
    outputs:
      matrix: ${{ steps.gen.outputs.matrix }}
    steps:
      - id: gen
        shell: python # run script directly using the Python interpreter
        run: |
          import os, json, itertools

          # Get event type and branch name
          event = os.environ["GITHUB_EVENT_NAME"]
          ref   = os.environ.get("GITHUB_REF_NAME", "")

          # Full matrix: used for main branch or pull requests
          full = dict(
              cpu        = ["amd64", "arm64"],
              pg_version = [16, 17],
              compiler   = ["clang", "gcc"],
              check_type = [
                  "normal", "debug", "sanitize", "check_page",
                  "valgrind_1", "valgrind_2", "pg_tests",
              ],
          )

          # Reduced matrix: used for all other push events
          branch_combos = [
              ("amd64", 16, "gcc"),
              ("amd64", 17, "clang"),
              ("arm64", 16, "clang"),
              ("arm64", 17, "gcc"),
          ]

          # Reverse matrix used for pull requests
          reverse_combos = [
              ("amd64", 16, "clang"),
              ("amd64", 17, "gcc"),
              ("arm64", 16, "gcc"),
              ("arm64", 17, "clang"),
          ]

          # Make matrix for the PR
          if os.environ["GITHUB_EVENT_NAME"] == "pull_request":
              with open(os.environ["GITHUB_EVENT_PATH"], "r") as f:
                  event = json.load(f)

              head_repo = event["pull_request"]["head"]["repo"]["full_name"]
              base_repo = event["pull_request"]["base"]["repo"]["full_name"]

              # If the PR is from a fork use full matrix
              if head_repo != base_repo:
                  matrix = full
              # If the PR is from the main repository use reduced reverse matrix
              else:
                  matrix = {
                      "include": [
                          {"cpu": c, "pg_version": pg, "compiler": comp, "check_type": ct}
                          for (c, pg, comp), ct in itertools.product(reverse_combos, full["check_type"])
                      ]
                  }
          # Make matrix for branches
          else:
              # Use full matrix for the main branch
              if ref == "main":
                  matrix = full
              # Use reduced matrix for other branches
              else:
                  matrix = {
                      "include": [
                          {"cpu": c, "pg_version": pg, "compiler": comp, "check_type": ct}
                          for (c, pg, comp), ct in itertools.product(branch_combos, full["check_type"])
                      ]
                  }

          # Export as job output
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"matrix={json.dumps(matrix)}\n")

  check:
    needs: matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}

    # Select runner based on CPU architecture
    runs-on: ${{ matrix.cpu == 'arm64' && 'blacksmith-8vcpu-ubuntu-2404-arm' || 'blacksmith-8vcpu-ubuntu-2404' }}
    env:
      LLVM_VER: 18
      CPU: ${{ matrix.cpu }}
      CHECK_TYPE: ${{ matrix.check_type }}
      PG_VERSION: ${{ matrix.pg_version }}
      COMPILER: ${{ matrix.compiler }}
    steps:
      - name: Checkout extension code into workspace directory
        uses: actions/checkout@v4
        with:
          path: orioledb
      - name: Get the required tag name
        shell: bash
        run: |
          echo "PGTAG=$(grep '^${{ matrix.pg_version }}: ' orioledb/.pgtags | cut -d' ' -f2-)" >> $GITHUB_ENV
      - name: Checkout PostgreSQL code into workspace directory
        uses: actions/checkout@v4
        with:
          repository: orioledb/postgres
          ref: ${{ env.PGTAG }}
          path: postgresql
      - name: Setup prerequisites
        run: bash ./orioledb/ci/prerequisites.sh
      - name: Build
        run: bash ./orioledb/ci/build.sh
      - name: Install post build prerequisites
        run: bash ./orioledb/ci/post_build_prerequisites.sh

      - name: Check
        timeout-minutes: ${{ startsWith(matrix.check_type, 'valgrind_') && 150 || 20 }}
        run: bash ./orioledb/ci/check.sh
      - name: Check output
        run: bash ./orioledb/ci/check_output.sh
        if: ${{ success() || failure() }}

      - name: Upload regression tests diffs
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: ${{ matrix.pg_version }}_${{ matrix.cpu }}_${{ matrix.compiler }}_${{ matrix.check_type }}_regression.diffs
          path: |
            ./orioledb/test/**/regression.diffs
            ./orioledb/test/**/isolation_filtered.diffs
            ./orioledb/test/log/*.log
            ./postgresql/src/test/**/regression.diffs
            ./postgresql/src/test/**/isolation_filtered.diffs
          retention-days: 2
          if-no-files-found: ignore
      - name: Upload testgres tests logs
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: ${{ matrix.pg_version }}_${{ matrix.cpu }}_${{ matrix.compiler }}_${{ matrix.check_type }}_testgres.logs
          path: |
            ./orioledb/test/tmp_check_t/*/logs/*log
          retention-days: 2
          if-no-files-found: ignore

      - name: Show stuck processes
        run: bash ./orioledb/ci/list_stuck.sh
        if: ${{ always() }}

      - name: Run lcov
        if: ${{ matrix.check_type != 'sanitize' && matrix.check_type != 'check_page' }}
        run: bash ./orioledb/ci/lcov.sh
      - name: Create artifact for coverage.info
        if: ${{ matrix.check_type != 'sanitize' && matrix.check_type != 'check_page' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.pg_version }}_${{ matrix.cpu }}_${{ matrix.compiler }}_${{ matrix.check_type }}_coverage.info
          path: ./orioledb/coverage.info
          retention-days: 1
          overwrite: true

  finish:
    needs: check
    runs-on: blacksmith-2vcpu-ubuntu-2404
    steps:
      - name: Checkout extension code into workspace directory
        uses: actions/checkout@v4
        with:
          path: orioledb
      - name: Retrieve saved coverage.infos
        uses: actions/download-artifact@v4
      - name: Merge coverage files
        run: bash ./orioledb/ci/lcov_merge.sh
      - name: coveralls
        uses: coverallsapp/github-action@v2
        with:
          files: ./orioledb/coverage.info

  cleanup:
    needs: finish
    runs-on: blacksmith-2vcpu-ubuntu-2404
    steps:
      - name: remove artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: "*coverage.info"
