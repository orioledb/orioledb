name: docker-nightly
#
# This CI workflow performs automated Docker image building and testing for OrioleDB
# across multiple PostgreSQL versions and distributions,
# and creating orioledb-nightly docker images.
#
# Test Phases:
# -----------
# 1. Docker image building with customizable build arguments
#    - old calling style with ALPINE_VERSION and UBUNTU_VERSION
#    - new calling style:  BASE_IMAGE, BASE_VERSION ( debian )
# 2. Official Docker Postgres library compatibility testing
# 3. OrioleDB-specific test suite execution ( make <check_targets> )
# 4. Docker image push to the registry ( docker.io , ghcr.io )
#

# TODO: remove the old calling style and use the new calling style for all distributions

on:
  push:
  pull_request:

defaults:
  run:
    shell: bash

env:
  MAIN_BRANCH: refs/heads/main  # Set to the main branch name for docker push
  DOCKER_IMAGE: orioledb-nightly  # Change this to your preferred image name
  GITHUB_REGISTRY: ghcr.io/${{ secrets.GHCR_USERNAME  || 'orioledb'  }}   # Change this to your preferred docker registry path
  DOCKER_REGISTRY: docker.io/${{ secrets.DOCKERHUB_USERNAME  || 'orioledb' }} # Change this to your preferred github registry path
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
  # it will be overrwritten by the workflow
  DOCKER_TAG:               # based on the matrix
  PUSH_TO_DOCKER_REGISTRY:  # IF secrets.DOCKERHUB_USERNAME THEN true
  PUSH_TO_GITHUB_REGISTRY:  # IF secrets.GHCR_USERNAME THEN true

jobs:
  test-docker-builds:
    strategy:
      fail-fast: true
      matrix:
        postgres: [16, 17]
        os:
          # clang-ubuntu-focal ( 20.04 )  We don't run testgrescheck; python 3.8 is too old
          - { compiler: "clang", distr: "ubuntu", distr-version: "focal",
              test_targets: "regresscheck isolationcheck" }
          # clang-alpine-3.21
          - { compiler: "clang", distr: "alpine", distr-version: "3.21",
              test_targets: "regresscheck isolationcheck testgrescheck"}
          # clang-ubuntu-noble
          - { compiler: "clang", distr: "ubuntu", distr-version: "noble",
              test_targets: "regresscheck isolationcheck testgrescheck" }
          # clang-debian-bookworm-slim
          - { compiler: "clang", distr: "debian", distr-version: "bookworm-slim",
              test_targets: "regresscheck isolationcheck testgrescheck" }

        # extra test cases
        include:
          # 17-gcc-alpine-3.21
          - postgres: 17
            os: { compiler: "gcc", distr: "alpine", distr-version: "3.21",
                  test_targets: "regresscheck isolationcheck testgrescheck" }
          # 17-gcc-ubuntu-noble
          - postgres: 17
            os: { compiler: "gcc", distr: "ubuntu", distr-version: "noble",
                  test_targets: "regresscheck isolationcheck testgrescheck" }
          # 17-clang-alpine-edge  : allowed to fail ( continue-on-error)
          - postgres: 17
            os: { compiler: "clang", distr: "alpine", distr-version: "edge",
                  test_targets: "regresscheck isolationcheck testgrescheck" }

    name: "docker ${{ matrix.postgres }}-${{ matrix.os.compiler }}-${{ matrix.os.distr }}-${{ matrix.os.distr-version }}"
    runs-on: ubuntu-latest
    continue-on-error: ${{ contains(fromJSON('["edge", "devel", "testing", "unstable", "unstable-slim", "experimental"]'), matrix.os.distr-version) }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure PUSH_TO_DOCKER_REGISTRY
        id: config_docker
        run: |
          if [ -n "${{ env.DOCKERHUB_USERNAME }}" ]; then
            echo "PUSH_TO_DOCKER_REGISTRY=true" >> $GITHUB_ENV
          else
            echo "No DOCKERHUB_USERNAME secret found. Disabling push to docker.io"
            echo "PUSH_TO_DOCKER_REGISTRY=false" >> $GITHUB_ENV
          fi

      - name: Configure PUSH_TO_GITHUB_REGISTRY
        id: config_github
        run: |
          if [ -n "${{ env.GHCR_USERNAME }}" ]; then
            echo "PUSH_TO_GITHUB_REGISTRY=true" >> $GITHUB_ENV
          else
            echo "No GHCR_USERNAME secret found. Disabling push to ghcr.io"
            echo "PUSH_TO_GITHUB_REGISTRY=false" >> $GITHUB_ENV
          fi

      - name: Set Docker tag
        id: set-tag
        run: |
          echo "DOCKER_TAG=${{ matrix.postgres }}-${{ matrix.os.compiler }}-${{ matrix.os.distr }}-${{ matrix.os.distr-version }}" >> $GITHUB_ENV

      - name: Verify Docker tag
        run: |
          echo "DOCKER_TAG=${{ env.DOCKER_TAG }}"

      - name: Extract metadata labels for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
             "${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}"
             "${{ env.GITHUB_REGISTRY }}/${{ env.DOCKER_IMAGE }}"
          tags: ${{ env.DOCKER_TAG }}

      # old calling style with ALPINE_VERSION and UBUNTU_VERSION
      - name: oldstyle docker build
        if: matrix.os.distr != 'debian'
        uses: docker/build-push-action@v6
        # https://github.com/docker/build-push-action
        with:
          context: .
          file: ${{ (matrix.os.distr == 'ubuntu' || matrix.os.distr == 'debian') && './docker/Dockerfile.ubuntu' || './docker/Dockerfile' }}
          platforms: linux/amd64
          push: false
          pull: true
          load: true
          tags: |
             "${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
             "${{ env.GITHUB_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
          labels: ${{ steps.meta.outputs.labels }}
          # for alpine+ubuntu: using the old calling style ( deprecated )
          build-args: |
            ALPINE_VERSION=${{ matrix.os.distr == 'alpine' && matrix.os.distr-version || '' }}
            UBUNTU_VERSION=${{ matrix.os.distr == 'ubuntu' && matrix.os.distr-version || '' }}
            PG_MAJOR=${{ matrix.postgres }}
            BUILD_CC_COMPILER=${{ matrix.os.compiler }}
            DOCKER_PG_LLVM_DEPS=llvm-dev clang
            DEBUG_MODE=false

      # new calling style:  BASE_IMAGE, BASE_VERSION
      - name: newstyle docker build
        if: matrix.os.distr == 'debian'
        uses: docker/build-push-action@v6
        # https://github.com/docker/build-push-action
        with:
          context: .
          file: ${{ (matrix.os.distr == 'ubuntu' || matrix.os.distr == 'debian') && './docker/Dockerfile.ubuntu' || './docker/Dockerfile' }}
          platforms: linux/amd64
          push: false
          pull: true
          load: true
          tags: |
             "${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
             "${{ env.GITHUB_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
          labels: ${{ steps.meta.outputs.labels }}
          # for debian: testing the new calling style
          build-args: |
            BASE_IMAGE=${{ matrix.os.distr }}
            BASE_VERSION=${{ matrix.os.distr-version }}
            PG_MAJOR=${{ matrix.postgres }}
            BUILD_CC_COMPILER=${{ matrix.os.compiler }}
            DOCKER_PG_LLVM_DEPS=llvm-dev clang
            DEBUG_MODE=false

      # docker image testing with https://github.com/docker-library/official-images.git
      # to check if the image is compatible with the official-images test suite
      # the special orioledb test config is in the ./test/orioledb-config.sh
      - name: Run Docker-official-postgres tests + minimal orioledb test
        run: |
          OFFIMG_LOCAL_CLONE=./log_docker_build/official-images
          OFFIMG_REPO_URL=https://github.com/docker-library/official-images.git
          mkdir -p "$OFFIMG_LOCAL_CLONE"
          git clone --depth=1 --branch=master "$OFFIMG_REPO_URL" "$OFFIMG_LOCAL_CLONE"
          "${OFFIMG_LOCAL_CLONE}/test/run.sh" \
              -c "${OFFIMG_LOCAL_CLONE}/test/config.sh" \
              -c "docker/orioledb-config.sh" \
              ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

      # run some make <check_targets> in the docker image
      - name: Run test_targets "${{ matrix.os.test_targets }}"
        run: |
          docker run --rm \
            --volume $(pwd):/local_workspace \
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            bash -c 'bash +x /local_workspace/ci/check_docker.sh --running all "${{ matrix.os.test_targets }}"'

      - name: Login to docker.io
        uses: docker/login-action@v3
        if: ${{ (env.PUSH_TO_DOCKER_REGISTRY =='true') && (github.ref == env.MAIN_BRANCH) && (github.event_name != 'pull_request')  }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        if: ${{ (env.PUSH_TO_GITHUB_REGISTRY =='true') && (github.ref == env.MAIN_BRANCH) && (github.event_name != 'pull_request')  }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Push to docker.io
        if: ${{ (env.PUSH_TO_DOCKER_REGISTRY =='true') && (github.ref == env.MAIN_BRANCH) && (github.event_name != 'pull_request')  }}
        run: docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

      - name: Push to ghcr.io
        if: ${{ (env.PUSH_TO_GITHUB_REGISTRY =='true') && (github.ref == env.MAIN_BRANCH) && (github.event_name != 'pull_request')  }}
        run: docker push ${{ env.GITHUB_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}


#----------------------
# How to ...
#
# Configuring Secrets in GitHub Actions
# - Click on Settings > Secrets and variables > Actions.    https://github.com/<user>/orioledb/settings/secrets/actions
# - Click New repository secret.
# - Add DOCKERHUB_USERNAME, DOCKERHUB_TOKEN , ...
#
#  Making a ghcr.io Image Public
# - Go to your GitHub profile and access GitHub Packages
# - Locate and select your container image
# - Click "Package Settings" in the right sidebar
# - Scroll to the "Danger Zone" section
# - Find "Change package visibility" and click "Change Visibility"
# - Select "Public" visibility
# - Confirm your choice to complete the process
# Your container image will now be publicly accessible via ghcr.io.

